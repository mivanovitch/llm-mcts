{"task_id": "HumanEval/26", "completion": "\n    result = []\n    counts = {}\n\n    for num in numbers:\n        if num not in counts:\n            counts[num] = 0\n        else:\n            counts[num] += 1\n\n    for num, count in counts.items():\n        if count == 0:\n            result.append(num)\n\n    return result\n", "stats": {"num_rollouts": 12, "num_generations": 2, "eval_time": "20.0029s"}}
{"task_id": "HumanEval/33", "completion": "\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    sorted_divisible_by_three = sorted(divisible_by_three)\n\n    result = l.copy()\n    for i, value in enumerate(result):\n        if i % 3 == 0:\n            result[i] = sorted_divisible_by_three.pop(0)\n    \n    return result\n", "stats": {"num_rollouts": 77, "num_generations": 15, "eval_time": "308.6897s"}}

{"task_id": "HumanEval/46", "completion": "\n    fib_sequence = [0, 0, 2, 0] + [0] * (n - 3)\n\n    for i in range(3, n):\n        fib_sequence[i + 1] = fib_sequence[i] + fib_sequence[i - 1] + fib_sequence[i - 2] + fib_sequence[i - 3]\n\n    return fib_sequence[-1]\n", "stats": {"num_rollouts": 5, "num_generations": 2, "eval_time": "31.5367s"}}
{"task_id": "HumanEval/54", "completion": "\n    return set(s0) == set(s1)\n\n", "stats": {"num_rollouts": 42, "num_generations": 10, "eval_time": "159.9110s"}}
{"task_id": "HumanEval/67", "completion": "\n    apples = int(s.split('apples')[0].strip())\n    oranges = int(s.split('and ')[1].split('oranges')[0].strip())\n\n    return n - apples - oranges\n\n", "stats": {"num_rollouts": 10, "num_generations": 4, "eval_time": "66.9767s"}}
{"task_id": "HumanEval/68", "completion": "\n    smallest_even = [float('inf'), -1]\n    for idx, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest_even[0]:\n            smallest_even = [num, idx]\n            \n    return smallest_even if smallest_even[1] >= 0 else []\n", "stats": {"num_rollouts": 3, "num_generations": 2, "eval_time": "47.9536s"}}
{"task_id": "HumanEval/83", "completion": "\n    return 2 * (9 * (10 ** (n - 2))) if n > 1 else 1\n\n", "stats": {"num_rollouts": 68, "num_generations": 19, "eval_time": "304.8217s"}}
{"task_id": "HumanEval/85", "completion": "\n    sum = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0 and i % 2 != 0:\n            sum += lst[i]\n    return sum\n\n", "stats": {"num_rollouts": 41, "num_generations": 7, "eval_time": "71.8638s"}}
{"task_id": "HumanEval/91", "completion": "\n    sentences = S.split('.')\n    sentences += S.split('?')\n    sentences += S.split('s')\n    return sum(sentence.strip().startswith(\"I\") for sentence in sentences)\n\n", "stats": {"num_rollouts": 128, "num_generations": 17, "eval_time": "298.2328s"}}
{"task_id": "HumanEval/93", "completion": "\n    def replace_vowels(c):\n        if c in 'aeiouAEIOU':\n            return chr((ord(c) - 97 + 2) % 26 + 97) if c.islower() else chr((ord(c) - 65 + 2) % 26 + 65)\n        return c\n    \n    return ''.join([replace_vowels(c).swapcase() for c in message])\n", "stats": {"num_rollouts": 19, "num_generations": 6, "eval_time": "106.6941s"}}
{"task_id": "HumanEval/95", "completion": "\n    if not dict:\n        return False\n\n    lower = 0\n    upper = 0\n\n    for key in dict:\n        if isinstance(key, str):\n            if key == key.lower():\n                lower += 1\n            elif key == key.upper():\n                upper += 1\n        else:\n            return False\n\n    return lower == len(dict) or upper == len(dict)\n", "stats": {"num_rollouts": 27, "num_generations": 7, "eval_time": "130.6352s"}}
{"task_id": "HumanEval/97", "completion": "\n    return (a % 10) * (b % 10)\n\n", "stats": {"num_rollouts": 11, "num_generations": 3, "eval_time": "57.6959s"}}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n\n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n\n    binary = bin(rounded_avg)[2:]\n\n    return \"0b\" + binary\n", "stats": {"num_rollouts": 68, "num_generations": 8, "eval_time": "224.9116s"}}
{"task_id": "HumanEval/108", "completion": "\n    def sum_digits(n):\n        if n < 0:\n            n = -n\n            return sum(map(int, str(n)[1:]))\n        else:\n            return sum(map(int, str(n)))\n\n    count = 0\n    for num in arr:\n        if sum_digits(num) > 0:\n            count += 1\n\n    return count\n", "stats": {"num_rollouts": 82, "num_generations": 14, "eval_time": "364.0146s"}}
{"task_id": "HumanEval/115", "completion": "\n    rows, cols = len(grid), len(grid[0])\n    bucket_count = 0\n\n    for row in grid:\n        bucket_count += sum(row)\n\n    return math.ceil(bucket_count / capacity)\n\n", "stats": {"num_rollouts": 128, "num_generations": 21, "eval_time": "418.6813s"}}
{"task_id": "HumanEval/119", "completion": "\n    def is_good(s):\n        count = 0\n        for c in s:\n            if c == '(':\n                count += 1\n            else:\n                if count == 0:\n                    return False\n                count -= 1\n        return count == 0\n\n    lst.sort()  # sort the list to ensure that we concatenate smaller strings first\n    s = lst[0] + lst[1]\n    while not is_good(s):\n        if len(lst) < 2:\n            return 'No'\n        lst.append(lst.pop(0) + lst.pop(0))  # append the concatenation of two smallest strings to the end of list\n        s = ''.join(lst)\n    return 'Yes'\n", "stats": {"num_rollouts": 2, "num_generations": 2, "eval_time": "61.0472s"}}
{"task_id": "HumanEval/125", "completion": "\n    import re\n\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for c in txt:\n            if c.islower():\n                if (ord(c) - ord('a')) % 2 == 1:\n                    count += 1\n        return count\n", "stats": {"num_rollouts": 5, "num_generations": 2, "eval_time": "40.5505s"}}
{"task_id": "HumanEval/126", "completion": "\n    return lst == sorted(lst) and len(set(lst)) == len(lst)\n\n", "stats": {"num_rollouts": 128, "num_generations": 21, "eval_time": "620.0844s"}}
{"task_id": "HumanEval/127", "completion": "\ndef intersection(interval1, interval2):\n    max_start = max(interval1[0], interval2[0])\n    min_end = min(interval1[1], interval2[1])\n    if max_start > min_end:  # no overlap\n        return \"NO\"\n    intersection_len = min_end - max_start + 1\n    if is_prime(intersection_len):\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n", "stats": {"num_rollouts": 128, "num_generations": 16, "eval_time": "398.8755s"}}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n\n    total = 0\n    sign_product = 1\n\n    for num in arr:\n        if num < 0:\n            sign_product *= -1\n        elif num > 0:\n            sign_product *= 1\n        else:\n            return 0\n\n        total += abs(num)\n\n    return total * sign_product\n", "stats": {"num_rollouts": 44, "num_generations": 6, "eval_time": "149.4150s"}}
{"task_id": "HumanEval/129", "completion": "\n    import heapq\n\n    n = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    visited = set()\n    min_heap = []\n    \n    for i in range(n):\n        for j in range(n):\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (grid[i][j], i * n + j))\n            else:\n                if grid[i][j] > min_heap[0][0]:\n                    heapq.heappop(min_heap)\n                    heapq.heappush(min_heap, (grid[i][j], i * n + j))\n    \n    result = []\n    while len(min_heap):\n        _, idx = heapq.heappop(min_heap)\n        result.append(idx % n + 1)\n        \n    return sorted(result)\n", "stats": {"num_rollouts": 128, "num_generations": 29, "eval_time": "1020.1983s"}}
{"task_id": "HumanEval/130", "completion": "\n    if n < 0:\n        return []\n\n    tri_sequence = [1, 3, 2] + [0] * (n - 2)\n\n    for i in range(3, n + 1):\n        if tri_sequence[i - 1] % 2 == 0:\n            tri_sequence[i] = 1 + tri_sequence[i - 1] // 2\n        else:\n            tri_sequence[i] = tri_sequence[i - 2] + tri_sequence[i - 1] + 3\n\n    return tri_sequence[:n+1]\n", "stats": {"num_rollouts": 128, "num_generations": 31, "eval_time": "824.7423s"}}
{"task_id": "HumanEval/132", "completion": "\n    stack = []\n    for ch in string:\n        if ch == '[':\n            stack.append(ch)\n        else: # ch == ']'\n            if len(stack) == 0 or stack[-1] != '[':\n                return False\n            stack.pop()\n            \n    return len(stack) > 0\n", "stats": {"num_rollouts": 128, "num_generations": 10, "eval_time": "345.9418s"}}
{"task_id": "HumanEval/134", "completion": "\n    if not txt:\n        return False\n\n    last_character = txt[-1]\n    second_to_last_character = '' if len(txt) == 1 else txt[-2]\n\n    return last_character.isalpha() and (second_to_last_character == ' ' or not second_to_last_character.isalnum())\n", "stats": {"num_rollouts": 6, "num_generations": 2, "eval_time": "52.2057s"}}
{"task_id": "HumanEval/137", "completion": "\n    a = a if isinstance(a, str) else str(a).replace('.', '').replace(',', '.')\n    b = b if isinstance(b, str) else str(b).replace('.', '').replace(',', '.')\n    \n    a_type = type(a)\n    b_type = type(b)\n\n    if a_type != b_type:\n        raise TypeError(\"Both arguments must be of the same type\")\n        \n    if a_type == str:\n        a, b = float(a), float(b)\n    \n    return None if a==b else max(a, b)\n", "stats": {"num_rollouts": 128, "num_generations": 19, "eval_time": "448.4168s"}}
{"task_id": "HumanEval/138", "completion": "\n    return n % 2 == 0 and n >= 8\n\n", "stats": {"num_rollouts": 68, "num_generations": 20, "eval_time": "361.2692s"}}
{"task_id": "HumanEval/140", "completion": "\n    last_was_space = False\n    new_text = []\n\n    for c in text:\n        if c.isspace():\n            if last_was_space:\n                new_text[-1] = '-'\n            else:\n                new_text.append('_')\n            \n            last_was_space = True\n        else:\n            new_text.append(c)\n            last_was_space = False\n    \n    return ''.join(new_text)\n", "stats": {"num_rollouts": 128, "num_generations": 23, "eval_time": "382.0221s"}}
{"task_id": "HumanEval/141", "completion": "\n    import re\n\n    if file_name.count('.') != 1:\n        return \"No\"\n\n    name, extension = file_name.split('.')\n\n    if not re.match(\"^[a-zA-Z]\", name):\n        return \"No\"\n    \n    if len(re.findall(\"\\d\", name)) > 3:\n        return \"No\"\n\n    if extension not in ['txt', 'exe', 'dll']:\n        return \"No\"\n\n    return \"Yes\"\n", "stats": {"num_rollouts": 42, "num_generations": 8, "eval_time": "465.7164s"}}
{"task_id": "HumanEval/142", "completion": "\n    return sum(x**2 if i%3==0 else x**3 for i, x in enumerate(lst))\n\n", "stats": {"num_rollouts": 128, "num_generations": 22, "eval_time": "569.1455s"}}
{"task_id": "HumanEval/144", "completion": "\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n\n    return (x_num * n_num) % (x_denom * n_denom) == 0\n", "stats": {"num_rollouts": 8, "num_generations": 2, "eval_time": "62.6731s"}}
{"task_id": "HumanEval/145", "completion": "\n    def sum_digits(n):\n        if n < 0:\n            n = -n\n        return sum(map(int, str(n)))\n\n    nums.sort()\n    nums.sort(key=sum_digits)\n    return nums\n", "stats": {"num_rollouts": 128, "num_generations": 21, "eval_time": "380.1870s"}}
{"task_id": "HumanEval/147", "completion": "\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    mod_counts = [0]*3\n\n    for num in a:\n        mod_counts[num % 3] += 1\n        \n    count += mod_counts[0]*(mod_counts[0]-1)*(mod_counts[0]-2)//6\n    count += mod_counts[1]*mod_counts[2]*(mod_counts[0])\n    count += mod_counts[1]*(mod_counts[1]-1)*(mod_counts[1]-2)//6\n    count += mod_counts[2]*(mod_counts[2]-1)*(mod_counts[2]-2)//6\n    \n    return count\n", "stats": {"num_rollouts": 3, "num_generations": 2, "eval_time": "38.6482s"}}
{"task_id": "HumanEval/160", "completion": "\n    expression = str(operand[0])\n\n    for idx in range(len(operator)):\n        expression += ' ' + operator[idx] + ' ' + str(operand[idx + 1])\n\n    return eval(expression)\n\n", "stats": {"num_rollouts": 6, "num_generations": 2, "eval_time": "28.0032s"}}
{"task_id": "HumanEval/163", "completion": "\n    return [i for i in range(min(a, b), max(a, b)+1) if i % 2 == 0]\n\n", "stats": {"num_rollouts": 128, "num_generations": 18, "eval_time": "240.5498s"}}
