{"task_id": "HumanEval/32", "completion": "\n    def poly_prime(xs, x):\n        \"\"\" Evaluates derivative of polynomial with coefficients xs at point x.\"\"\"\n        return sum([i * coeff * math.pow(x, i - 1) for i, coeff in enumerate(xs)])\n\n    # Newton's method to find roots\n    guess = len(xs) / 2  \n    while abs(poly(xs, guess)) > 0.000001:\n        guess -= poly(xs, guess) / poly_prime(xs, guess)\n        \n    return guess\n", "stats": {"num_rollouts": 59, "num_generations": 13, "eval_time": "155.3365s", "mean_test_time": "4.5325s"}}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group back. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) ==3 else group for group in groups]\n    return \"\".join(groups)\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "8.8476s", "mean_test_time": "2.2082s"}}
{"task_id": "HumanEval/44", "completion": "\n    if x == 0:\n        return '0'\n\n    result = []\n    while x > 0:\n        digit = x % base\n        result.append(str(digit))\n        x //= base\n\n    return ''.join(result[::-1])  # reverse the list and join into a string\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "7.9470s", "mean_test_time": "3.6166s"}}
{"task_id": "HumanEval/50", "completion": "\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "4.9703s", "mean_test_time": "2.2046s"}}
{"task_id": "HumanEval/53", "completion": "\n    return x + y\n\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "4.1222s", "mean_test_time": "3.1437s"}}
{"task_id": "HumanEval/87", "completion": "\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, item in enumerate(row):\n            if item == x:\n                coordinates.append((i, j))\n                \n    return sorted(coordinates, key=lambda tup: (tup[0], -tup[1]))\n", "stats": {"num_rollouts": 22, "num_generations": 6, "eval_time": "49.5673s", "mean_test_time": "3.5555s"}}
{"task_id": "HumanEval/113", "completion": "\n    def count_odd_numbers(s):\n        return sum([int(c) % 2 for c in s])\n\n    result = []\n    for idx, elem in enumerate(lst):\n        odd_count = count_odd_numbers(elem)\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(odd_count, odd_count, odd_count, odd_count))\n    return result\n", "stats": {"num_rollouts": 13, "num_generations": 3, "eval_time": "27.1449s", "mean_test_time": "2.7579s"}}
{"task_id": "HumanEval/151", "completion": "\n    return sum([i**2 for i in lst if type(i)==int and i > 0 and i%2 != 0])\n\n", "stats": {"num_rollouts": 18, "num_generations": 5, "eval_time": "34.2715s", "mean_test_time": "3.5269s"}}
