{"task_id": "HumanEval/6", "completion": "\n    def count_depth(s):\n        stack = []\n        max_len = 0\n        current = 0\n        for c in s:\n            if c == '(':\n                stack.append(c)\n                current += 1\n                max_len = max(max_len, current)\n            elif c == ')':\n                stack.pop()\n                current -= 1\n        return max_len\n\n    groups = paren_string.split(' ')\n    depths = [count_depth(g) for g in groups]\n    return depths\n"}
{"task_id": "HumanEval/6", "completion": "\n    result = []\n    current_depth = 0\n    max_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            if current_depth > max_depth:\n                max_depth = current_depth\n        elif c == ')':\n            current_depth -= 1\n\n    result.append(max_depth)\n\n    return result\n"}
{"task_id": "HumanEval/6", "completion": "\n    def count_depth(s):\n        stack = []\n        max_d = 0\n        d = 0\n        for c in s:\n            if c == '(':\n                stack.append(c)\n                d += 1\n                max_d = max(max_d, d)\n            elif c == ')':\n                stack.pop()\n                d -= 1\n        return max_d\n\n    groups = paren_string.split(' ')\n    depths = [count_depth(g) for g in groups]\n    return depths\n"}
{"task_id": "HumanEval/6", "completion": "\n    result = []\n    current_depth = 0\n    max_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            if current_depth > max_depth:\n                max_depth = current_depth\n        elif c == ')':\n            current_depth -= 1\n\n    result.append(max_depth)\n\n    return result\n"}
{"task_id": "HumanEval/6", "completion": "\n    result = []\n    current_depth = 0\n    max_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            if current_depth > max_depth:\n                max_depth = current_depth\n        elif c == ')':\n            current_depth -= 1\n\n    result.append(max_depth)\n\n    return result\n"}
{"task_id": "HumanEval/19", "completion": "\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n\n    words = numbers.split()\n    sorted_words = sorted(words, key=lambda x: num_dict[x])\n    \n    return ' '.join(sorted_words)\n"}
{"task_id": "HumanEval/19", "completion": "\n    num_dict = {'zero':0, 'one':1, 'two':2, 'three':3, 'four':4, 'five':5, 'six':6, 'seven':7, 'eight':8, 'nine':9}\n    \n    words = numbers.split()\n    words.sort(key=lambda w: num_dict[w])\n\n    return \" \".join(words)\n"}
{"task_id": "HumanEval/19", "completion": "\n    num2word = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    word2num = {v: k for k, v in num2word.items()}\n    \n    numbers_list = [num2word[x] for x in numbers.split(' ')]\n    numbers_list.sort()\n    sorted_string = \" \".join([word2num[x] for x in numbers_list])\n\n    return sorted_string\n"}
{"task_id": "HumanEval/19", "completion": "\n    num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n    }\n\n    words = numbers.split()\n    sorted_words = sorted(words, key=lambda word: num_dict[word])\n    \n    return ' '.join(sorted_words)\n"}
{"task_id": "HumanEval/19", "completion": "\n    num2words = {0:'zero', 1:'one', 2:'two', 3:'three', 4:'four', 5:'five', 6:'six', 7:'seven', 8:'eight', 9:'nine'}\n    words2num = {v: k for k, v in num2words.items()}\n    \n    numbers_list = [words2num[word] for word in numbers.split(' ')]\n    numbers_list.sort()\n    sorted_string = \" \".join([num2words[num] for num in numbers_list])\n\n    return sorted_string\n"}
{"task_id": "HumanEval/20", "completion": "\n    numbers = sorted(numbers)\n    smallest_difference = float('inf')\n    result = ()\n\n    for idx in range(1, len(numbers)):\n        difference = abs(numbers[idx] - numbers[idx-1])\n        \n        if difference < smallest_difference:\n            smallest_difference = difference\n            result = (numbers[idx-1], numbers[idx])\n            \n    return result\n"}
{"task_id": "HumanEval/20", "completion": "\n    numbers = sorted(numbers)\n    smallest_difference = float('inf')\n    result = ()\n\n    for idx in range(len(numbers)-1):\n        difference = abs(numbers[idx] - numbers[idx+1])\n        \n        if difference < smallest_difference:\n            smallest_difference = difference\n            result = (numbers[idx], numbers[idx+1])\n            \n    return result\n"}
{"task_id": "HumanEval/20", "completion": "\n    numbers = sorted(numbers)\n    smallest_difference = float('inf')\n    result = ()\n\n    for idx in range(1, len(numbers)):\n        difference = abs(numbers[idx] - numbers[idx-1])\n        \n        if difference < smallest_difference:\n            smallest_difference = difference\n            result = (numbers[idx-1], numbers[idx])\n            \n    return result\n"}
{"task_id": "HumanEval/20", "completion": "\n    numbers = sorted(numbers)\n    smallest_difference = float('inf')\n    result = ()\n\n    for idx in range(1, len(numbers)):\n        difference = abs(numbers[idx] - numbers[idx-1])\n        if difference < smallest_difference:\n            smallest_difference = difference\n            result = (numbers[idx-1], numbers[idx])\n\n    return result\n"}
{"task_id": "HumanEval/20", "completion": "\n    numbers = sorted(numbers)\n    smallest_difference = float('inf')\n    result = ()\n\n    for idx in range(1, len(numbers)):\n        difference = abs(numbers[idx] - numbers[idx-1])\n        if difference < smallest_difference:\n            smallest_difference = difference\n            result = (numbers[idx-1], numbers[idx])\n\n    return result\n"}
{"task_id": "HumanEval/26", "completion": "\n    result = []\n    seen = set()\n\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n\n    return result\n\n"}
{"task_id": "HumanEval/26", "completion": "\n    result = []\n    seen = set()\n\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n\n    return result\n\n"}
{"task_id": "HumanEval/26", "completion": "\n    result = []\n    seen = set()\n\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n\n    return result\n\n"}
{"task_id": "HumanEval/26", "completion": "\n    result = []\n    seen = set()\n\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n\n    return result\n\n"}
{"task_id": "HumanEval/26", "completion": "\n    result = []\n    seen = set()\n\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n\n    return result\n\n"}
{"task_id": "HumanEval/33", "completion": "\n    divisible_by_three = [l[i] for i in range(len(l)) if (i + 1) % 3 == 0]\n    sorted_divisible_by_three = sorted(divisible_by_three)\n    \n    result = l.copy()\n    for i, value in enumerate(sorted_divisible_by_three):\n        while result[i * 3] != divisible_by_three[i]:\n            result[i * 3], result[result.index(divisible_by_three[i])] = result[result.index(divisible_by_three[i])], result[i * 3]\n    return result\n"}
{"task_id": "HumanEval/33", "completion": "\n    divisible_by_three = [l[i] for i in range(len(l)) if (i+1) % 3 == 0]\n    sorted_divisible_by_three = sorted(divisible_by_three)\n    \n    result = l.copy()\n    for i, value in enumerate(sorted_divisible_by_three):\n        while result[i*3]:\n            i += 1\n        result[i*3] = value\n        \n    return result\n"}
{"task_id": "HumanEval/33", "completion": "\n    divisible_by_three = [l[i] for i in range(len(l)) if (i+1) % 3 == 0]\n    sorted_divisible_by_three = sorted(divisible_by_three)\n    \n    result = l.copy()\n    for i, value in enumerate(sorted_divisible_by_three):\n        while result[i*3]:\n            i += 1\n        result[i*3] = value\n        \n    return result\n"}
{"task_id": "HumanEval/33", "completion": "\n    divisible_by_three = [l[i] for i in range(len(l)) if (i+1) % 3 == 0]\n    sorted_divisible_by_three = sorted(divisible_by_three)\n    \n    result = l.copy()\n    for i, value in enumerate(sorted_divisible_by_three):\n        while result[i*3]:\n            i += 1\n        result[i*3] = value\n        \n    return result\n"}
{"task_id": "HumanEval/33", "completion": "\n    divisible_by_three = [l[i] for i in range(len(l)) if (i + 1) % 3 == 0]\n    sorted_divisible_by_three = sorted(divisible_by_three)\n    \n    result = l[:]\n    for i, value in enumerate(sorted_divisible_by_three):\n        while (result[i * 3 + 1] != value):\n            result.insert((i * 3) + 2, value)\n            \n    return result\n"}
{"task_id": "HumanEval/39", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b\n\n    count = 0\n    i = 1\n    while count < n:\n        if is_prime(fibonacci(i)):\n            count += 1\n        i += 1\n\n    return fibonacci(i - 1)\n"}
{"task_id": "HumanEval/39", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b\n\n    count = 0\n    i = 1\n    while count < n:\n        if is_prime(fibonacci(i)):\n            count += 1\n        i += 1\n\n    return fibonacci(i - 1)\n"}
{"task_id": "HumanEval/39", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b\n\n    count = 0\n    i = 1\n    while count < n:\n        f = fibonacci(i)\n        if is_prime(f):\n            count += 1\n        i += 1\n\n    return fibonacci(i - 1)\n"}
{"task_id": "HumanEval/39", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b\n\n    count = 0\n    i = 1\n    while count < n:\n        f = fibonacci(i)\n        if is_prime(f):\n            count += 1\n        i += 1\n\n    return fibonacci(i - 1)\n"}
{"task_id": "HumanEval/39", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 1\n    while count < n:\n        f = fibonacci(i)\n        if is_prime(f):\n            count += 1\n        i += 1\n\n    return fibonacci(i - 1)\n"}
{"task_id": "HumanEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False\n"}
{"task_id": "HumanEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False\n"}
{"task_id": "HumanEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False\n"}
{"task_id": "HumanEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False\n"}
{"task_id": "HumanEval/40", "completion": "\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    fib = [0, 0, 2, 0] + [0] * (n - 4)\n\n    for i in range(4, n):\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4]\n\n    return fib[-1]\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    fib = [0, 0, 2, 0] + [0] * (n - 4)\n\n    for i in range(4, n):\n        fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4]\n\n    return fib[-1]\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    fib_values = [0, 0, 2, 0] + [0] * (n - 4)\n\n    for i in range(4, n):\n        fib_values[i] = fib_values[i-1] + fib_values[i-2] + fib_values[i-3] + fib_values[i-4]\n\n    return fib_values[-1]\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    fib_values = [0, 0, 2, 0] + [0] * (n - 4)\n\n    for i in range(4, n):\n        fib_values[i] = fib_values[i-1] + fib_values[i-2] + fib_values[i-3] + fib_values[i-4]\n\n    return fib_values[-1]\n"}
{"task_id": "HumanEval/46", "completion": "\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(n - 4):\n        a, b, c, d = b, c, d, a + b + c + d\n\n    return d\n"}
{"task_id": "HumanEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "HumanEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "HumanEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "HumanEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "HumanEval/54", "completion": "\n    return sorted(s0) == sorted(s1)\n\n"}
{"task_id": "HumanEval/57", "completion": "\n    if len(l) < 2:\n        return True\n\n    increasing = None\n\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            continue\n        elif l[i] < l[i+1]:\n            if increasing is not None and not increasing:\n                return False\n            increasing = True\n        else:\n            if increasing is not None and increasing:\n                return False\n            increasing = False\n\n    return True\n"}
{"task_id": "HumanEval/57", "completion": "\n    if len(l) < 2:\n        return True\n\n    increasing = None\n\n    for idx in range(len(l)-1):\n        if l[idx] == l[idx+1]:\n            continue\n        elif l[idx] < l[idx+1]:\n            if increasing is not None and not increasing:\n                return False\n            increasing = True\n        else:\n            if increasing is not None and increasing:\n                return False\n            increasing = False\n\n    return True\n"}
{"task_id": "HumanEval/57", "completion": "\n    if len(l) < 2:\n        return True\n\n    increasing = None\n\n    for idx in range(len(l)-1):\n        diff = l[idx+1] - l[idx]\n        \n        if diff == 0:\n            continue\n            \n        if increasing is None:\n            increasing = diff > 0\n        else:\n            if (diff > 0) != increasing:\n                return False\n                \n    return True\n"}
{"task_id": "HumanEval/57", "completion": "\n    if len(l) < 2:\n        return True\n\n    increasing = None\n\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            continue\n        elif l[i] < l[i+1]:\n            if increasing is not None and not increasing:\n                return False\n            increasing = True\n        else:\n            if increasing is not None and increasing:\n                return False\n            increasing = False\n\n    return True\n"}
{"task_id": "HumanEval/57", "completion": "\n    if len(l) < 2:\n        return True\n\n    increasing = None\n\n    for idx in range(len(l)-1):\n        if l[idx] == l[idx+1]:\n            continue\n        elif l[idx] < l[idx+1]:\n            if increasing is not None and not increasing:\n                return False\n            increasing = True\n        else:\n            if increasing is not None and increasing:\n                return False\n            increasing = False\n\n    return True\n"}
{"task_id": "HumanEval/59", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    factors = []\n    for x in range(2, n+1):\n        while (n % x) == 0 and is_prime(x):\n            factors.append(x)\n            n //= x\n    return max(factors)\n"}
{"task_id": "HumanEval/59", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    largest = 2\n    while n % 2 == 0:\n        n = n // 2\n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if is_prime(i):\n            while n % i == 0:\n                largest = i\n                n = n // i\n                \n    if n > 2 and is_prime(n):\n        largest = n\n        \n    return largest\n"}
{"task_id": "HumanEval/59", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    largest = 2\n    while n % 2 == 0:\n        n //= 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0 and is_prime(i):\n            largest = i\n            n //= i\n    if n > 2 and is_prime(n):\n        largest = n\n    return largest\n"}
{"task_id": "HumanEval/59", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    largest = 2\n    while n % 2 == 0:\n        n = n // 2\n\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            if is_prime(i):\n                largest = i\n            n = n // i\n\n    if n > 2 and is_prime(n):\n        largest = n\n\n    return largest\n"}
{"task_id": "HumanEval/59", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    largest = 2\n    while n % 2 == 0:\n        n //= 2\n\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            if is_prime(i):\n                largest = i\n            n //= i\n\n    return max(largest, n) if is_prime(n) and n != 1 else largest\n"}
{"task_id": "HumanEval/67", "completion": "\n    def fruit_distribution(s,n):\n        a=int(s.split(\"apples\")[0].strip().split()[-1])\n        o=int(s.split('and')[1].strip().split()[0])\n        return n-a-o\n"}
{"task_id": "HumanEval/67", "completion": "\n    def fruit_distribution(s,n):\n        apple_count = int(s.split(' ')[0])\n        orange_count = int(s.split('and')[1].split(' ')[0])\n        \n        return n - apple_count - orange_count\n"}
{"task_id": "HumanEval/67", "completion": "\n    fruits = s.split(' ')\n    total_apples = int(fruits[0])\n    total_oranges = int(fruits[-1])\n\n    return n - total_apples - total_oranges\n\n"}
{"task_id": "HumanEval/67", "completion": "\n    apple, orange = map(int, s.split()[::2])\n    return n - apple - orange\n\n"}
{"task_id": "HumanEval/67", "completion": "\n    def fruit_distribution(s,n):\n        apple, orange = map(int, s.split()[::2])\n        return n - apple - orange\n\n"}
{"task_id": "HumanEval/68", "completion": "\n    even_nodes = [(idx, val) for idx, val in enumerate(arr) if val % 2 == 0]\n    return min(even_nodes, key=lambda x: (x[1], x[0])) if even_nodes else []\n\n"}
{"task_id": "HumanEval/68", "completion": "\n    even_nodes = [(v, i) for i, v in enumerate(arr) if v % 2 == 0]\n    return min(even_nodes, default=[], key=lambda x: (x[0], -x[1]))\n\n"}
{"task_id": "HumanEval/68", "completion": "\n    even_nodes = [(i, val) for i, val in enumerate(arr) if val % 2 == 0]\n  \n    return min(even_nodes, key=lambda x: (x[1], x[0])) if even_nodes else []\n\n"}
{"task_id": "HumanEval/68", "completion": "\n    even_nodes = [(v, i) for i, v in enumerate(arr) if v % 2 == 0]\n    return min(even_nodes, default=([],))[::-1]\n\n"}
{"task_id": "HumanEval/68", "completion": "\n    even_nodes = [(i, val) for i, val in enumerate(arr) if val % 2 == 0]\n    return min(even_nodes, key=lambda x: (x[1], x[0])) if even_nodes else []\n\n"}
{"task_id": "HumanEval/71", "completion": "\n    # Check if it is a valid triangle\n    if (a + b > c and a + c > b and b + c > a):\n        s = (a + b + c) / 2.0   # Semi-perimeter of the triangle\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5    # Heron's formula for area\n        return round(area, 2)\n    else:\n        return -1\n"}
{"task_id": "HumanEval/71", "completion": "\n    # Check if sides form a valid triangle\n    if (a + b > c and a + c > b and b + c > a):\n        # Calculate semi-perimeter\n        s = (a + b + c) / 2.0\n        # Use Heron's formula to calculate area\n        return round(pow(s*(s - a)*(s - b)*(s - c), 0.5) , 2)\n    else:\n        return -1\n"}
{"task_id": "HumanEval/71", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        # calculate semi-perimeter\n        s = (a + b + c) / 2.0\n        # apply Heron's formula to get area\n        return round(sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n        return -1\n"}
{"task_id": "HumanEval/71", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        # calculate semi-perimeter\n        s = (a + b + c) / 2.0\n        return round((s*(s - a) * (s - b) * (s - c)) ** 0.5, 2)\n    else:\n        return -1\n"}
{"task_id": "HumanEval/71", "completion": "\n    if a + b > c and a + c > b and b + c > a:\n        # calculate semi-perimeter\n        s = (a + b + c) / 2\n        # apply Heron's formula to get area\n        return round((s * (s - a) * (s - b) * (s - c)) ** 0.5, 2)\n    else:\n        return -1\n"}
{"task_id": "HumanEval/72", "completion": "\n    def will_it_fly(q, w):\n        if q == q[::-1] and sum(q) <= w:\n            return True\n        else:\n            return False\n\n"}
{"task_id": "HumanEval/72", "completion": "\n    def is_palindrome(lst):\n        return lst == lst[::-1]\n        \n    if not is_palindrome(q) or sum(q) > w:\n        return False\n    else:\n        return True\n\n"}
{"task_id": "HumanEval/72", "completion": "\n    def check_palindrome(lst):\n        return lst == lst[::-1]\n\n    if not check_palindrome(q) or sum(q) > w:\n        return False\n    else:\n        return True\n\n"}
{"task_id": "HumanEval/72", "completion": "\n    def will_it_fly(q, w):\n        if q == q[::-1] and sum(q) <= w:\n            return True\n        else:\n            return False\n            \n"}
{"task_id": "HumanEval/72", "completion": "\n    def will_it_fly(q, w):\n        if q == q[::-1] and sum(q) <= w:\n            return True\n        else:\n            return False\n\n"}
{"task_id": "HumanEval/75", "completion": "\n    def check_prime(n):\n        if n == 1 or (n % 2 == 0 and n > 2): \n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    \n    primes = [i for i in range(2, a) if check_prime(i)]\n    factors = 1\n    for prime in primes:\n        while a % prime == 0:\n            factors *= prime\n            a /= prime\n            if factors > 3 or (factors == 3 and a != 1):\n                return False\n    return True if factors == 3 else False\n"}
{"task_id": "HumanEval/75", "completion": "\n    def check_prime(n):\n        if n == 1 or (n % 2 == 0 and n > 2): \n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    \n    primes = [i for i in range(2, a) if check_prime(i)]\n    factors = 0\n    for prime in primes:\n        while a % prime == 0:\n            a /= prime\n            factors += 1\n    return factors == 3 and a == 1\n"}
{"task_id": "HumanEval/75", "completion": "\n    def is_prime(n):\n        if n < 2: return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    factors = []\n    for i in range(2, a+1):\n        while a % i == 0 and is_prime(i):\n            factors.append(i)\n            a //= i\n            if len(factors) > 3: \n                return False\n    return len(factors) == 3\n"}
{"task_id": "HumanEval/75", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    factors = []\n    for i in range(2, a+1):\n        if is_prime(i) and a % i == 0:\n            factors.append(i)\n            \n    return len(factors) == 3 and factors[0]*factors[1]*factors[2] == a\n"}
{"task_id": "HumanEval/75", "completion": "\n    def check_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    factors = []\n    for i in range(2, a+1):\n        while a % i == 0 and check_prime(i):\n            factors.append(i)\n            a //= i\n            if len(factors) > 3:\n                break\n                \n    return len(factors) == 3\n"}
{"task_id": "HumanEval/81", "completion": "\n    def numerical_letter_grade(grades):\n        result = []\n        for grade in grades:\n            if grade == 4.0:\n                result.append('A+')\n            elif grade > 3.7:\n                result.append('A')\n            elif grade > 3.3:\n                result.append('A-')\n            elif grade > 3.0:\n                result.append('B+')\n            elif grade > 2.7:\n                result.append('B')\n            elif grade > 2.3:\n                result.append('B-')\n            elif grade > 2.0:\n                result.append('C+')\n            elif grade > 1.7:\n                result.append('C')\n            elif grade > 1.3:\n                result.append('C-')\n            elif grade > 1.0:\n                result.append('D+')\n            elif grade > 0.7:\n                result.append('D')\n            elif grade > 0.0:\n                result.append('D-')\n            else:\n                result.append('E')\n        return result\n"}
{"task_id": "HumanEval/81", "completion": "\n    def numerical_letter_grade(grades):\n        result = []\n        for grade in grades:\n            if grade == 4.0:\n                result.append('A+')\n            elif 3.7 <= grade < 4.0:\n                result.append('A')\n            elif 3.3 <= grade < 3.7:\n                result.append('A-')\n            elif 3.0 <= grade < 3.3:\n                result.append('B+')\n            elif 2.7 <= grade < 3.0:\n                result.append('B')\n            elif 2.3 <= grade < 2.7:\n                result.append('B-')\n            elif 2.0 <= grade < 2.3:\n                result.append('C+')\n            elif 1.7 <= grade < 2.0:\n                result.append('C')\n            elif 1.3 <= grade < 1.7:\n                result.append('C-')\n            elif 1.0 <= grade < 1.3:\n                result.append('D+')\n            elif 0.7 <= grade < 1"}
{"task_id": "HumanEval/81", "completion": "\ndef numerical_letter_grade(grades):\n    result = []\n    for grade in grades:\n        if grade == 4.0:\n            result.append('A+')\n        elif grade > 3.7:\n            result.append('A')\n        elif grade > 3.3:\n            result.append('A-')\n        elif grade > 3.0:\n            result.append('B+')\n        elif grade > 2.7:\n            result.append('B')\n        elif grade > 2.3:\n            result.append('B-')\n        elif grade > 2.0:\n            result.append('C+')\n        elif grade > 1.7:\n            result.append('C')\n        elif grade > 1.3:\n            result.append('C-')\n        elif grade > 1.0:\n            result.append('D+')\n        elif grade > 0.7:\n            result.append('D')\n        elif grade > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result\n"}
{"task_id": "HumanEval/81", "completion": "\n    def numerical_letter_grade(grades):\n        result = []\n        for grade in grades:\n            if grade == 4.0:\n                result.append('A+')\n            elif 3.7 <= grade < 4.0:\n                result.append('A')\n            elif 3.3 <= grade < 3.7:\n                result.append('A-')\n            elif 3.0 <= grade < 3.3:\n                result.append('B+')\n            elif 2.7 <= grade < 3.0:\n                result.append('B')\n            elif 2.3 <= grade < 2.7:\n                result.append('B-')\n            elif 2.0 <= grade < 2.3:\n                result.append('C+')\n            elif 1.7 <= grade < 2.0:\n                result.append('C')\n            elif 1.3 <= grade < 1.7:\n                result.append('C-')\n            elif 1.0 <= grade < 1.3:\n                result.append('D+')\n            elif 0.7 <= grade < 1"}
{"task_id": "HumanEval/81", "completion": "\n    def numerical_letter_grade(grades):\n        result = []\n        for grade in grades:\n            if grade == 4.0:\n                result.append('A+')\n            elif grade > 3.7:\n                result.append('A')\n            elif grade > 3.3:\n                result.append('A-')\n            elif grade > 3.0:\n                result.append('B+')\n            elif grade > 2.7:\n                result.append('B')\n            elif grade > 2.3:\n                result.append('B-')\n            elif grade > 2.0:\n                result.append('C+')\n            elif grade > 1.7:\n                result.append('C')\n            elif grade > 1.3:\n                result.append('C-')\n            elif grade > 1.0:\n                result.append('D+')\n            elif grade > 0.7:\n                result.append('D')\n            elif grade > 0.0:\n                result.append('D-')\n            else:\n                result.append('E')\n        return result\n"}
{"task_id": "HumanEval/83", "completion": "\n    if n == 1:\n        return 2 # for single digit number 1 and 0\n    else:\n        return 8 * (n - 1) + 4 # 2^(n-1) + the numbers that start/end with 1 in a n-digit number without first or last digit.\n"}
{"task_id": "HumanEval/83", "completion": "\n    if n == 1:\n        return 2 # for single digit numbers 0 and 1\n    else:\n        return 8 * (n - 1) + 4\n\n"}
{"task_id": "HumanEval/83", "completion": "\n    if n == 1:\n        return 2 # for single digit number 1 and 0\n    else:\n        return 8 * (n - 1) + 4\n\n"}
{"task_id": "HumanEval/83", "completion": "\n    if n == 1:\n        return 2\n    else:\n        return 2 * (9 ** (n - 1))\n\n"}
{"task_id": "HumanEval/83", "completion": "\n    if n == 1:\n        return 2 # for single digit number 1 and 0\n    else:\n        return 8 * (n - 1) + 4\n\n"}
{"task_id": "HumanEval/85", "completion": "\n    return sum(lst[i] for i in range(1, len(lst), 2))\n\n"}
{"task_id": "HumanEval/85", "completion": "\n    return sum(lst[i] for i in range(1, len(lst), 2))\n\n"}
{"task_id": "HumanEval/85", "completion": "\n    return sum(lst[i] for i in range(1, len(lst), 2))\n\n"}
{"task_id": "HumanEval/85", "completion": "\n    return sum(lst[i] for i in range(1, len(lst), 2))\n\n"}
{"task_id": "HumanEval/85", "completion": "\n    return sum(lst[i] for i in range(1, len(lst), 2))\n\n"}
{"task_id": "HumanEval/89", "completion": "\n    result = []\n    for c in s:\n        if 'a' <= c <= 'z':\n            result.append(chr((ord(c) - ord('a') + 2*2) % 26 + ord('a')))\n        elif 'A' <= c <= 'Z':\n            result.append(chr((ord(c) - ord('A') + 2*2) % 26 + ord('A')))\n    return \"\".join(result)\n"}
{"task_id": "HumanEval/89", "completion": "\n    result = []\n    for c in s:\n        if 'a' <= c <= 'z':\n            result.append(chr((ord(c) - ord('a') + 2*2) % 26 + ord('a')))\n        elif 'A' <= c <= 'Z':\n            result.append(chr((ord(c) - ord('A') + 2*2) % 26 + ord('A')))\n    return \"\".join(result)\n"}
{"task_id": "HumanEval/89", "completion": "\n    result = []\n    for c in s:\n        if 'a' <= c <= 'z':\n            result.append(chr((ord(c) - ord('a') + 2*2) % 26 + ord('a')))\n        elif 'A' <= c <= 'Z':\n            result.append(chr((ord(c) - ord('A') + 2*2) % 26 + ord('A')))\n    return \"\".join(result)\n"}
{"task_id": "HumanEval/89", "completion": "\n    result = []\n    for c in s:\n        if 'a' <= c <= 'z':\n            result.append(chr((ord(c) - ord('a') + 2*2) % 26 + ord('a')))\n        elif 'A' <= c <= 'Z':\n            result.append(chr((ord(c) - ord('A') + 2*2) % 26 + ord('A')))\n    return \"\".join(result)\n"}
{"task_id": "HumanEval/89", "completion": "\n    result = []\n\n    for c in s:\n        if 'a' <= c <= 'z':\n            result.append(chr((ord(c) - ord('a') + 2*2) % 26 + ord('a')))\n        elif 'A' <= c <= 'Z':\n            result.append(chr((ord(c) - ord('A') + 2*2) % 26 + ord('A')))\n        else:\n            result.append(c)\n\n    return \"\".join(result)\n"}
{"task_id": "HumanEval/91", "completion": "\n    sentences = S.split('.') + S.split('?') + S.split(' ')\n    return sum(s.strip().startswith(\"I\") for s in sentences if s.strip())\n\n"}
{"task_id": "HumanEval/91", "completion": "\n    sentences = S.split('.') + S.split('?') + S.split(' ')\n    return sum(s.strip().startswith(\"I\") for s in sentences if s.strip())\n\n"}
{"task_id": "HumanEval/91", "completion": "\n    sentences = S.split('.') + S.split('?') + S.split(' ')\n    count = 0\n\n    for sentence in sentences:\n        if len(sentence) > 0 and sentence[0] == \"I\":\n            count += 1\n    \n    return count\n"}
{"task_id": "HumanEval/91", "completion": "\n    sentences = S.split('.') + S.split('?') + S.split(' ')\n    return sum(s.strip().startswith(\"I\") for s in sentences if s.strip())\n\n"}
{"task_id": "HumanEval/91", "completion": "\n    sentences = S.split('.') + S.split('?') + S.split('s')\n    return sum(1 for sentence in sentences if sentence.strip().startswith(\"I\"))\n\n"}
{"task_id": "HumanEval/93", "completion": "\n    vowels = 'aeiouAEIOU'\n    alphabet_lower = 'abcdefghijklmnopqrstuvwxyz'\n    alphabet_upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    \n    encoded_message = ''\n\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                # find the index of this character in alphabet and add 2 to it\n                new_char_index = (alphabet_lower.find(char.lower()) + 2) % 26\n                new_char = alphabet_lower[new_char_index] if char.islower() else alphabet_upper[new_lwqer_index]\n            else:\n                # swap case of the character\n                new_char = char.upper() if char.islower() else char.lower()\n        else:\n            new_char = char  # keep non-alphabetic characters as they are\n        \n        encoded_message += new_char\n    \n    return encoded_message\n"}
{"task_id": "HumanEval/93", "completion": "\n    vowels = 'aeiouAEIOU'\n    alphabet_lower = 'abcdefghijklmnopqrstuvwxyz'\n    alphabet_upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    \n    encoded_message = ''\n    \n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                # find the index of this vowel in alphabet and add 2 to it\n                new_char_index = (alphabet_lower.find(char.lower()) + 2) % 26\n                # use that index to get the character from alphabet, keep case same as original char\n                new_char = alphabet_lower[new_char_index] if char.islower() else alphabet_upper[new_char_index]\n            else:\n                new_char = char.swapcase()  # swap the case of non-vowels\n                \n            encoded_message += new_char\n        else:\n            encoded_message += char  # keep non-alphabetic characters as is"}
{"task_id": "HumanEval/93", "completion": "\n    vowels = 'aeiouAEIOU'\n    alphabet_lower = 'abcdefghijklmnopqrstuvwxyz'\n    alphabet_upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    \n    encoded_message = ''\n    \n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                # get the index of the character in lowercase alphabet and add 2 to it\n                new_char_index = (alphabet_lower.index(char.lower()) + 2) % 26\n                # check if original character was upper case\n                if char.isupper():\n                    encoded_message += alphabet_upper[new_char_index]\n                else:\n                    encoded_message += alphabet_lower[new_char_index]\n            else:\n                # swap case of the character and add to message\n                if char.isupper():\n                    encoded_message += char.lower()\n                else:\n                    encoded_message += char.upper()\n        else:\n            # non-"}
{"task_id": "HumanEval/93", "completion": "\n    vowels = 'aeiouAEIOU'\n    alphabet_lower = 'abcdefghijklmnopqrstuvwxyz'\n    alphabet_upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    \n    encoded_message = []\n    \n    for char in message:\n        if char in vowels:\n            # find the position of this character in lowercase alphabet\n            pos = alphabet_lower.index(char.lower())\n            \n            # get the corresponding character 2 places ahead, and keep case\n            new_char = alphabet_lower[pos+2] if char.islower() else alphabet_upper[pos+2]\n        else:\n            new_char = char.swapcase()\n        \n        encoded_message.append(new_char)\n    \n    return ''.join(encoded_message)\n"}
{"task_id": "HumanEval/93", "completion": "\n    vowels = 'aeiouAEIOU'\n    alphabet_lower = 'abcdefghijklmnopqrstuvwxyz'\n    alphabet_upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    \n    encoded_message = ''\n    \n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                # Replace vowel with letter 2 places ahead of it in alphabet\n                if char.islower():\n                    index = alphabet_lower.index(char) + 2\n                    encoded_message += alphabet_lower[index % len(alphabet_lower)]\n                else:\n                    index = alphabet_upper.index(char) + 2\n                    encoded_message += alphabet_upper[index % len(alphabet_upper)]\n            else:\n                # Swap case of letter\n                if char.islower():\n                    encoded_message += char.upper()\n                else:\n                    encoded_message += char.lower()\n        else:\n            encoded_message += char\n            \n    return"}
{"task_id": "HumanEval/94", "completion": "\n    def is_prime(n):\n        if n < 2: return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0: return False\n        return True\n\n    primes = [i for i in lst if is_prime(i)]\n    max_prime = max(primes) if primes else 0\n    \n    return sum([int(digit) for digit in str(max_prime)])\n"}
{"task_id": "HumanEval/94", "completion": "\n    def is_prime(n):\n        if n < 2: return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0: return False\n        return True\n\n    primes = [i for i in lst if is_prime(i)]\n    largest_prime = max(primes)\n    \n    return sum(int(digit) for digit in str(largest_prime))\n"}
{"task_id": "HumanEval/94", "completion": "\n    def is_prime(n):\n        if n < 2: return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [x for x in lst if is_prime(x)]\n    largest_prime = max(primes)\n    sum_of_digits = sum([int(i) for i in str(largest_prime)])\n    \n    return sum_of_digits\n"}
{"task_id": "HumanEval/94", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in lst if is_prime(i)]\n    max_prime = max(primes) if primes else 0\n    \n    return sum([int(digit) for digit in str(max_prime)])\n"}
{"task_id": "HumanEval/94", "completion": "\n    def is_prime(n):\n        if n < 2: return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0: return False\n        return True\n\n    primes = [x for x in lst if is_prime(x)]\n    largest_prime = max(primes)\n    \n    return sum([int(i) for i in str(largest_prime)])\n"}
{"task_id": "HumanEval/95", "completion": "\n    if not dict:\n        return False\n        \n    keys = list(dict.keys())\n    lower_case_keys = [k for k in keys if isinstance(k, str) and k == k.lower()]\n    upper_case_keys = [k for k in keys if isinstance(k, str) and k == k.upper()]\n    \n    return len(lower_case_keys) == 0 or len(upper_case_keys) == 0\n"}
{"task_id": "HumanEval/95", "completion": "\n    if not dict:\n        return False\n        \n    keys = list(dict.keys())\n    lower_keys = [k for k in keys if isinstance(k, str) and k == k.lower()]\n    upper_keys = [k for k in keys if isinstance(k, str) and k == k.upper()]\n    \n    return len(lower_keys) == 0 or len(upper_keys) == 0\n"}
{"task_id": "HumanEval/95", "completion": "\n    if not dict:\n        return False\n        \n    keys = list(dict.keys())\n    lower_keys = [k for k in keys if isinstance(k, str) and k == k.lower()]\n    upper_keys = [k for k in keys if isinstance(k, str) and k == k.upper()]\n    \n    return len(lower_keys) == 0 or len(upper_keys) == 0\n"}
{"task_id": "HumanEval/95", "completion": "\n    if not dict:\n        return False\n        \n    keys = list(dict.keys())\n    lower_keys = [k for k in keys if isinstance(k, str) and k == k.lower()]\n    upper_keys = [k for k in keys if isinstance(k, str) and k == k.upper()]\n    \n    return len(lower_keys) == 0 or len(upper_keys) == 0\n"}
{"task_id": "HumanEval/95", "completion": "\n    if not dict:\n        return False\n        \n    keys = list(dict.keys())\n    lower_keys = [k for k in keys if isinstance(k, str) and k == k.lower()]\n    upper_keys = [k for k in keys if isinstance(k, str) and k == k.upper()]\n    \n    return len(lower_keys) == 0 or len(upper_keys) == 0\n"}
{"task_id": "HumanEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [x for x in range(n) if is_prime(x)]\n    return primes\n"}
{"task_id": "HumanEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [x for x in range(n) if is_prime(x)]\n    return primes\n"}
{"task_id": "HumanEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [x for x in range(n) if is_prime(x)]\n    return primes\n"}
{"task_id": "HumanEval/96", "completion": "\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n"}
{"task_id": "HumanEval/96", "completion": "\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [x for x in range(n) if is_prime(x)]\n    return primes\n"}
{"task_id": "HumanEval/97", "completion": "\n    def get_unit_digit(n):\n        if n < 0:\n            n = -n\n\n        while n >= 10:\n            n /= 10\n\n        return int(n)\n\n    return get_unit_digit(a) * get_unit_digit(b)\n"}
{"task_id": "HumanEval/97", "completion": "\n    def get_unit_digit(n):\n        if n < 0:\n            n = -n\n        while n >= 10:\n            n /= 10\n        return int(n)\n\n    return get_unit_digit(a) * get_unit_digit(b)\n"}
{"task_id": "HumanEval/97", "completion": "\n    def get_unit_digit(n):\n        if n < 0:\n            n = -n\n        while n >= 10:\n            n /= 10\n        return int(n)\n\n    return get_unit_digit(a) * get_unit_digit(b)\n"}
{"task_id": "HumanEval/97", "completion": "\n    def get_unit_digit(n):\n        if n < 0:\n            n = -n\n        while n >= 10:\n            n /= 10\n        return int(n)\n\n    return get_unit_digit(a) * get_unit_digit(b)\n"}
{"task_id": "HumanEval/97", "completion": "\n    def get_unit_digit(n):\n        if n < 0:\n            n = -n\n        while n >= 10:\n            n /= 10\n        return int(n)\n\n    return get_unit_digit(a) * get_unit_digit(b)\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n\n    avg = round((n + m) / 2)\n\n    return bin(avg).replace(\"0b\", \"\")\n\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n\n    avg = round((n + m) / 2)\n\n    return bin(avg).replace(\"0b\", \"\")\n\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n\n    avg = round((n + m) / 2)\n    binary = bin(avg).replace(\"0b\", \"\")\n\n    return binary\n\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m)/2)\n        binary_avg = bin(avg).replace(\"0b\", \"\")\n        return binary_avg\n\n"}
{"task_id": "HumanEval/103", "completion": "\n    if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg).replace(\"0b\", \"\")\n\n"}
{"task_id": "HumanEval/105", "completion": "\n    num2words = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    words2num = {v: k for k, v in num2words.items()}\n    \n    arr = sorted([i for i in arr if 1 <= i <= 9])[::-1]\n        \n    return [num2words[i] for i in arr]\n"}
{"task_id": "HumanEval/105", "completion": "\n    num2words = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    words2num = {v: k for k, v in num2words.items()}\n    \n    arr = sorted([i for i in arr if 1 <= i <= 9])[::-1]\n    \n    return [num2words[i] for i in arr]\n"}
{"task_id": "HumanEval/105", "completion": "\n    num2words = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    words2num = {v: k for k, v in num2words.items()}\n    \n    arr = sorted([i for i in arr if 1 <= i <= 9])[::-1]\n    \n    return [num2words[i] for i in arr]\n"}
{"task_id": "HumanEval/105", "completion": "\n    num2words = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    words2num = {v: k for k, v in num2words.items()}\n    \n    arr = sorted([i for i in arr if 1 <= i <= 9])[::-1]\n\n    return [num2words[i] for i in arr]\n"}
{"task_id": "HumanEval/105", "completion": "\n    num2words = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}\n    words2num = {v: k for k, v in num2words.items()}\n    \n    arr = sorted([i for i in arr if 1 <= i <= 9])[::-1]\n        \n    return [num2words[i] for i in arr]\n"}
{"task_id": "HumanEval/106", "completion": "\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n - 1)\n\n    def sum_to_n(n):\n        return (n*(n+1))//2\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_n(i))\n\n    return result\n"}
{"task_id": "HumanEval/106", "completion": "\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n - 1)\n\n    def sum_to_i(n):\n        return int((n + 1) * (n / 2))\n\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_i(i))\n\n    return result\n"}
{"task_id": "HumanEval/106", "completion": "\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n - 1)\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n\n    return result\n"}
{"task_id": "HumanEval/106", "completion": "\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n - 1)\n\n    def sum_to_i(n):\n        return int((n * (n + 1)) / 2)\n\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_i(i))\n\n    return result\n"}
{"task_id": "HumanEval/106", "completion": "\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n - 1)\n\n    def sum_to_i(n):\n        return (n * (n + 1)) // 2\n\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to_i(i))\n\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    count_even = 0\n    count_odd = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n\n    return (count_even, count_odd)\n"}
{"task_id": "HumanEval/107", "completion": "\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    count_even = 0\n    count_odd = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n                \n    return (count_even, count_odd)\n"}
{"task_id": "HumanEval/107", "completion": "\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    count_even, count_odd = 0, 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n                \n    return (count_even, count_odd)\n"}
{"task_id": "HumanEval/107", "completion": "\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    count_even = 0\n    count_odd = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n                \n    return (count_even, count_odd)\n"}
{"task_id": "HumanEval/107", "completion": "\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    count_even = 0\n    count_odd = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n                \n    return (count_even, count_odd)\n"}
{"task_id": "HumanEval/108", "completion": "\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    return sum(sum_of_digits(x) > 0 for x in arr)\n\n"}
{"task_id": "HumanEval/108", "completion": "\n    def sum_digits(n):\n        return sum(int(d) for d in str(n))\n\n    return sum(sum_digits(x) > 0 for x in arr)\n\n"}
{"task_id": "HumanEval/108", "completion": "\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    return sum(sum_of_digits(x) > 0 for x in arr)\n\n"}
{"task_id": "HumanEval/108", "completion": "\n    def sum_digits(n):\n        return sum(int(d) for d in str(n))\n\n    return len([x for x in arr if sum_digits(x) > 0])\n\n"}
{"task_id": "HumanEval/108", "completion": "\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n))\n\n    return sum(sum_of_digits(x) > 0 for x in arr)\n\n"}
{"task_id": "HumanEval/109", "completion": "\n    def check_sorted(arr):\n        return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))\n\n    if len(set(arr)) == 1 or check_sorted(arr):\n        return True\n    \n    shifted = arr[-1:] + arr[:-1]\n    while shifted != sorted(shifted):\n        shifted = shifted[-1:] + shifted[:-1]\n        if check_sorted(shifted):\n            return True\n        \n    return False\n"}
{"task_id": "HumanEval/109", "completion": "\n    def check_sort(arr):\n        return all(arr[i] <= arr[i+1] for i in range(len(arr)-1))\n        \n    if len(arr) == 0 or check_sort(arr):\n        return True\n    \n    shifted = arr[-1:] + arr[:-1]\n    return check_sort(shifted)\n"}
{"task_id": "HumanEval/109", "completion": "\n    def check_sort(arr):\n        return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))\n        \n    if len(arr) == 0 or check_sort(arr):\n        return True\n    \n    shifted = [arr[-1]] + arr[:-1]\n    while shifted != arr:\n        if check_sort(shifted):\n            return True\n        shifted = [shifted[-1]] + shifted[:-1]\n        \n    return False\n"}
{"task_id": "HumanEval/109", "completion": "\n    def check_sorted(arr):\n        return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))\n        \n    if len(arr) == 0 or check_sorted(arr):\n        return True\n    \n    rotated = [arr[-1]] + arr[:-1]\n    while not check_sorted(rotated):\n        rotated = [rotated[-1]] + rotated[:-1]\n        if check_sorted(rotated):\n            return True\n        \n    return False\n"}
{"task_id": "HumanEval/109", "completion": "\n    def check_sorted(arr):\n        return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))\n\n    if len(arr) == 0 or check_sorted(arr):\n        return True\n    \n    shifted = arr[-1:] + arr[:-1]\n    while shifted != sorted(shifted):\n        shifted = shifted[-1:] + shifted[:-1]\n        if check_sorted(shifted):\n            return True\n        \n    return False\n"}
{"task_id": "HumanEval/111", "completion": "\n    counts = dict()\n    words = test.split(\" \")\n\n    for word in words:\n        if word not in counts:\n            counts[word] = 1\n        else:\n            counts[word] += 1\n            \n    max_value = max(counts.values()) if counts else 0\n    \n    return {k: v for k, v in counts.items() if v == max_value}\n"}
{"task_id": "HumanEval/111", "completion": "\n    count_dict = {i : test.count(i) for i in set(test.split())}\n    max_value = max(list(count_dict.values())) if len(count_dict) > 0 else 0\n    \n    return {k: v for k, v in count_dict.items() if v == max_value}\n"}
{"task_id": "HumanEval/111", "completion": "\n    count_dict = {}\n    for letter in test.split():\n        if letter not in count_dict:\n            count_dict[letter] = 1\n        else:\n            count_dict[letter] += 1\n            \n    max_value = max(count_dict.values()) if count_dict else 0\n    \n    return {k: v for k, v in count_dict.items() if v == max_value}\n"}
{"task_id": "HumanEval/111", "completion": "\n    count_dict = dict()\n    for letter in test.split():\n        if letter not in count_dict:\n            count_dict[letter] = 1\n        else:\n            count_dict[letter] += 1\n            \n    max_value = max(count_dict.values()) if count_dict else 0\n    \n    return {k: v for k, v in count_dict.items() if v == max_value}\n"}
{"task_id": "HumanEval/111", "completion": "\n    count = dict()\n    words = test.split(\" \")\n\n    for word in words:\n        if word not in count:\n            count[word] = 1\n        else:\n            count[word] += 1\n            \n    max_value = max(count.values()) if count else 0\n    \n    return {k: v for k, v in count.items() if v == max_value}\n"}
{"task_id": "HumanEval/115", "completion": "\n    total_wells = 0\n    for row in grid:\n        total_wells += sum(row)\n\n    return math.ceil(total_wells / capacity)\n\n"}
{"task_id": "HumanEval/115", "completion": "\n    rows = len(grid)\n    cols = len(grid[0])\n    buckets = 0\n\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                buckets += 1\n    \n    return math.ceil(buckets / capacity)\n"}
{"task_id": "HumanEval/115", "completion": "\n    total_wells = 0\n    for row in grid:\n        total_wells += sum(row)\n\n    return math.ceil(total_wells / capacity)\n\n"}
{"task_id": "HumanEval/115", "completion": "\n    def max_fill(grid, capacity):\n        total = 0\n        for row in grid:\n            total += sum(row)\n            \n        return math.ceil(total / capacity)\n\n"}
{"task_id": "HumanEval/115", "completion": "\n    rows = len(grid)\n    cols = len(grid[0])\n    buckets_used = 0\n\n    for row in range(rows):\n        for col in range(cols):\n            if grid[row][col] == 1:\n                buckets_needed = math.ceil((col + 1) / capacity)  # +1 because we start counting from 0\n                buckets_used += buckets_needed\n                \n    return buckets_used\n"}
{"task_id": "HumanEval/119", "completion": "\ndef match_parens(lst):\n    s1, s2 = lst[0], lst[1]\n    balance = 0\n    for ch in s1+s2:\n        if ch == '(':\n            balance += 1\n        elif ch == ')':\n            balance -= 1\n        if balance < 0:\n            return \"No\"\n    return \"Yes\" if balance == 0 else \"No\"\n"}
{"task_id": "HumanEval/119", "completion": "\ndef match_parens(lst):\n    s1, s2 = lst\n    if s1.count('(') < s1.count(')'):\n        s1 += ')'\n    else:\n        s1 += '('\n        \n    if s2.count('(') > s2.count(')'):\n        s2 += ')'\n    else:\n        s2 += '('\n    \n    combined = s1 + s2[s1.count('(')-s1.count(')'):]\n        \n    stack = []\n    for p in combined:\n        if p == '(':\n            stack.append(p)\n        elif p == ')':\n            if not stack:\n                return \"No\"\n            else:\n                stack.pop()\n                \n    return \"Yes\" if not stack else \"No\"\n"}
{"task_id": "HumanEval/119", "completion": "\ndef match_parens(lst):\n    s1, s2 = lst\n    if s1.count('(') < s1.count(')'):\n        s1 += ')'\n    else:\n        s1 += '('\n        \n    if s2.count('(') < s2.count(')'):\n        s2 += ')'\n    else:\n        s2 += '('\n    \n    combined = s1 + s2\n    stack = []\n    for p in combined:\n        if p == '(':\n            stack.append(p)\n        elif p == ')':\n            if not stack or stack[-1] != '(':\n                return \"No\"\n            else:\n                stack.pop()\n                \n    return \"Yes\" if not stack else \"No\"\n"}
{"task_id": "HumanEval/119", "completion": "\n    def is_good(s):\n        count = 0\n        for c in s:\n            if c == '(':\n                count += 1\n            else:\n                if count == 0:\n                    return False\n                count -= 1\n        return count == 0\n\n    lst.sort()  # sort the list to ensure that we concatenate smaller strings first\n    s = lst[0] + lst[1]\n    while not is_good(s):\n        if len(lst) > 2:\n            lst[1], lst[2] = lst[2], lst[1]  # swap the second and third strings\n        else:\n            lst[0], lst[1] = lst[1], lst[0]  # swap the first and second strings\n        s = lst[0] + lst[1]\n    return 'Yes'\n"}
{"task_id": "HumanEval/119", "completion": "\ndef match_parens(lst):\n    s1, s2 = lst\n    if s1.count('(') < s1.count(')'):\n        s1 += ')'\n    else:\n        s1 += '('\n        \n    if s2.count('(') < s2.count(')'):\n        s2 += ')'\n    else:\n        s2 += '('\n    \n    for i in range(len(s1)):\n        for j in range(len(s2)):\n            res = s1[:i] + s1[i:]\n            res = res[:j] + res[j:]\n            \n            if is_balanced(res):\n                return 'Yes'\n    return 'No'\n    \ndef is_balanced(s):\n    count = 0\n    for c in s:\n        if c == '(':\n            count += 1\n        elif c == ')':\n            if count == 0:\n                return False\n            count -= 1\n    return count == 0\n"}
{"task_id": "HumanEval/120", "completion": "\n    import heapq\n\n    return sorted(heapq.nlargest(k, arr))\n\n"}
{"task_id": "HumanEval/120", "completion": "\n    return sorted(arr, reverse=True)[:k]\n\n"}
{"task_id": "HumanEval/120", "completion": "\n    return sorted(arr, reverse=True)[:k]\n\n"}
{"task_id": "HumanEval/120", "completion": "\n    import heapq\n\n    return sorted(heapq.nlargest(k, arr))\n\n"}
{"task_id": "HumanEval/120", "completion": "\n    return sorted(arr, reverse=True)[:k]\n\n"}
{"task_id": "HumanEval/123", "completion": "\n    def collatz(n):\n        result = []\n        while n != 1:\n            if n % 2 == 0:\n                n //= 2\n            else:\n                result.append(n)\n                n = 3 * n + 1\n        return [1] + result[::-1]\n    \n    collatz_sequence = collatz(n)\n    odd_numbers = list(filter(lambda x: x % 2 != 0, collatz_sequence))\n\n    return sorted(list(set(odd_numbers)))\n"}
{"task_id": "HumanEval/123", "completion": "\n    def collatz(n):\n        result = []\n        while n != 1:\n            if n % 2 == 0:\n                n /= 2\n            else:\n                result.append(int(n))\n                n = 3 * n + 1\n        return [1] + result[::-1]\n    \n    collatz_sequence = collatz(n)\n    odd_numbers = [x for x in collatz_sequence if x % 2 != 0]\n    return sorted(list(set(odd_numbers)))\n"}
{"task_id": "HumanEval/123", "completion": "\n    def collatz(n):\n        result = []\n        while n != 1:\n            if n % 2 == 0:\n                n /= 2\n            else:\n                result.append(int(n))\n                n = 3 * n + 1\n        return [1] + result[::-1]\n    \n    collatz_sequence = collatz(n)\n    odd_numbers = list(filter(lambda x: x % 2 != 0, collatz_sequence))\n    \n    return sorted(list(set(odd_numbers))) # using set to remove duplicates and sort the result.\n"}
{"task_id": "HumanEval/123", "completion": "\n    def collatz(n):\n        result = []\n        while n != 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                result.append(n)\n                n = 3 * n + 1\n        return [1] + result[::-1]\n    \n    collatz_sequence = collatz(n)\n    odd_numbers = list(filter(lambda x: x % 2 != 0, collatz_sequence))\n    return sorted(list(set(odd_numbers)))\n"}
{"task_id": "HumanEval/123", "completion": "\n    def collatz(n):\n        result = []\n        while n != 1:\n            if n % 2 == 0:\n                n /= 2\n            else:\n                result.append(int(n))\n                n = 3 * n + 1\n        return [1] + result[::-1]\n    \n    collatz_sequence = collatz(n)\n    odd_numbers = sorted([i for i in set(collatz_sequence) if i % 2 != 0])\n\n    return odd_numbers\n"}
{"task_id": "HumanEval/124", "completion": "\n    import re\n\n    def valid_date(date):\n        date_format = \"^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-[0-9]{4}$\"\n        \n        if not re.match(date_format, date):\n            return False\n            \n        month, day, year = map(int, date.split('-'))\n        \n        if month in (4, 6, 9, 11) and day > 30:\n            return False\n        elif month == 2 and day > 29:\n            return False\n        elif day > 31:\n            return False\n            \n        return True\n"}
{"task_id": "HumanEval/124", "completion": "\n    import re\n\n    if not date or len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n\n    month, day, year = map(int, date.split('-'))\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    elif month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n\n    return True\n"}
{"task_id": "HumanEval/124", "completion": "\n    import re\n\n    def valid_date(date):\n        date_format = \"^[01]?[0-9]-[0-3]?[0-9]-[0-9]{4}$\"\n        if not re.match(date_format, date):\n            return False\n        \n        month, day, year = map(int, date.split('-'))\n\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            # Check for leap year\n            if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n                if day < 1 or day > 29:\n                    return False\n            else:\n                if day < 1 or day > 28:\n                    return False\n        else:\n"}
{"task_id": "HumanEval/124", "completion": "\n    import re\n\n    def valid_date(date):\n        date_format = \"^[01]?[0-9]-[0-3]?[0-9]-[0-9]{4}$\"\n        \n        if not re.match(date_format, date):\n            return False\n            \n        month, day, year = map(int, date.split('-'))\n    \n        if month in (1, 3, 5, 7, 8, 10, 12) and day <= 31:\n            return True\n        \n        elif month in (4, 6, 9, 11) and day <= 30:\n            return True\n            \n        elif month == 2:\n            if ((year%4==0 and year%100 != 0) or (year%400==0)) and day <=29 :\n                return True\n                \n            elif day<=28:\n                return True\n        \n        else: \n            return False\n"}
{"task_id": "HumanEval/124", "completion": "\n    if date == '':\n        return False\n\n    parts = date.split('-')\n\n    if len(parts) != 3 or len(parts[0]) != 2 or len(parts[1]) != 2 or len(parts[2]) != 4:\n        return False\n\n    month, day, year = int(parts[0]), int(parts[1]), int(parts[2])\n\n    if month < 1 or month > 12:\n        return False\n\n    if day < 1 or (month in [1, 3, 5, 7, 8, 10, 12] and day > 31) or (month in [4, 6, 9, 11] and day > 30):\n        return False\n    elif month == 2:\n        if day > 29:\n            return False\n        # Check for leap year\n        if ((year % 4 != 0) or (year % 100 == 0 and year % 400 != 0)) and day > 28:\n            return False\n    return True\n"}
{"task_id": "HumanEval/125", "completion": "\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum([1 for c in set(txt) if c.islower()]) % 2 == 1\n"}
{"task_id": "HumanEval/125", "completion": "\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum([1 for c in set(txt) if c.islower()]) % 2 == 1\n"}
{"task_id": "HumanEval/125", "completion": "\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum([1 for c in set(txt) if c.islower()]) % 2 == 1\n"}
{"task_id": "HumanEval/125", "completion": "\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum([1 for c in set(txt) if c.islower()]) % 2 == 1\n"}
{"task_id": "HumanEval/125", "completion": "\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum([1 for c in set(txt) if c.islower()]) % 2 == 1\n"}
{"task_id": "HumanEval/126", "completion": "\ndef is_sorted(lst):\n    if len(set(lst)) != len(lst):\n        return False\n    else:\n        return lst == sorted(lst)\n\n"}
{"task_id": "HumanEval/126", "completion": "\ndef is_sorted(lst):\n    if len(set(lst)) != len(lst):\n        return False\n    else:\n        return lst == sorted(lst)\n\n"}
{"task_id": "HumanEval/126", "completion": "\ndef is_sorted(lst):\n    if len(set(lst)) != len(lst):\n        return False\n        \n    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i + 1]:\n            return False\n            \n    return True\n"}
{"task_id": "HumanEval/126", "completion": "\ndef is_sorted(lst):\n    if len(set(lst)) != len(lst) or lst != sorted(lst):\n        return False\n    else:\n        return True\n\nprint(is_sorted([5]))  # \u279e True\nprint(is_sorted([1, 2, 3, 4, 5]))  # \u279e True\nprint(is_sorted([1, 3, 2, 4, 5]))  # \u279e False\nprint(is_sorted([1, 2, 3, 4, 5, 6]))  # \u279e True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))  # \u279e True\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))  # \u279e False\nprint(is_sorted([1, 2, 2, 3, 3, 4]))  # \u279e"}
{"task_id": "HumanEval/126", "completion": "\ndef is_sorted(lst):\n    if len(set(lst)) != len(lst):\n        return False\n        \n    return lst == sorted(lst)\n\n"}
{"task_id": "HumanEval/127", "completion": "\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:  # No intersection\n        return \"NO\"\n        \n    length = end - start + 1\n    return \"YES\" if is_prime(length) else \"NO\"\n"}
{"task_id": "HumanEval/127", "completion": "\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:  # no intersection\n        return \"NO\"\n        \n    length = end - start + 1\n    return \"YES\" if is_prime(length) else \"NO\"\n"}
{"task_id": "HumanEval/127", "completion": "\ndef is_prime(n):\n    if n < 2: return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:  # no overlap\n        return \"NO\"\n        \n    length = end - start + 1\n    return \"YES\" if is_prime(length) else \"NO\"\n"}
{"task_id": "HumanEval/127", "completion": "\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:  # No intersection\n        return \"NO\"\n        \n    length = end - start + 1  \n    return \"YES\" if is_prime(length) else \"NO\"\n"}
{"task_id": "HumanEval/127", "completion": "\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:  # no intersection\n        return \"NO\"\n        \n    length = end - start + 1  \n    return \"YES\" if is_prime(length) else \"NO\"\n"}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n\n    sign = 1\n    magnitude = 0\n\n    for num in arr:\n        if num < 0:\n            sign *= -1\n            magnitude += abs(num)\n        elif num > 0:\n            magnitude += num\n\n    return sign * magnitude\n"}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n\n    sign = 1\n    magnitude = 0\n\n    for num in arr:\n        if num < 0:\n            sign *= -1\n            magnitude += abs(num)\n        elif num > 0:\n            magnitude += num\n\n    return sign * magnitude\n"}
{"task_id": "HumanEval/128", "completion": "\n    if not arr:\n        return None\n\n    sign = 1\n    magnitude = 0\n\n    for num in arr:\n        if num < 0:\n            sign *= -1\n            magnitude += abs(num)\n        elif num > 0:\n            magnitude += num\n\n    return sign * magnitude\n"}
{"task_id": "HumanEval/128", "completion": "\n    if len(arr) == 0:\n        return None\n\n    sign = 1\n    magnitude = 0\n\n    for num in arr:\n        if num < 0:\n            sign *= -1\n            magnitude += abs(num)\n        elif num > 0:\n            magnitude += num\n\n    return sign * magnitude\n"}
{"task_id": "HumanEval/128", "completion": "\n    if len(arr) == 0:\n        return None\n\n    sign = 1\n    magnitude = 0\n\n    for num in arr:\n        if num < 0:\n            sign *= -1\n            magnitude += abs(num)\n        elif num > 0:\n            magnitude += num\n\n    return sign*magnitude\n"}
{"task_id": "HumanEval/129", "completion": "\n    n = len(grid)\n    directions = [(-1,0), (0,-1), (1,0), (0,1)] # up, left, down, right\n    visited = [[False for _ in range(n)] for __ in range(n)]\n    \n    def dfs(x, y, k):\n        if k == 0: return [grid[x][y]]\n        \n        min_path = None\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            \n            if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny]:\n                visited[nx][ny] = True\n                \n                path = dfs(nx, ny, k - 1)\n                if min_path is None or (len(min_path) == len(path) and min_path < path) or (len(min_path) > len(path)):\n                    min_path = [grid[x][y]] + path\n                \n                visited[nx][ny] = False\n        \n"}
{"task_id": "HumanEval/129", "completion": "\n    n = len(grid)\n    directions = [(-1, 0), (0, -1), (1, 0), (0, 1)]\n    visited = set()\n    min_path = []\n\n    def dfs(x, y, path):\n        nonlocal min_path\n        if len(path) == k:\n            if not min_path or path < min_path:\n                min_path = path[:]\n            return\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                path.append(grid[nx][ny])\n                dfs(nx, ny, path)\n                path.pop()\n                visited.remove((nx, ny))\n\n    for i in range(n):\n        for j in range(n):\n            visited.add((i, j))\n            dfs(i, j, [grid"}
{"task_id": "HumanEval/129", "completion": "\n    n = len(grid)\n    directions = ((0, -1), (0, 1), (-1, 0), (1, 0))\n    visited = [[False for _ in range(n)] for _ in range(n)]\n    \n    def dfs(x, y):\n        if len(path) == k:\n            return path\n        \n        min_path = None\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            \n            if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny]:\n                path.append(grid[nx][ny])\n                visited[nx][ny] = True\n                \n                new_path = dfs(nx, ny)\n                if min_path is None or (new_path is not None and new_path < min_path):\n                    min_path = new_path\n                    \n                path.pop()\n                visited[nx][ny] = False\n        \n        return min_path\n    \n    min_total_path ="}
{"task_id": "HumanEval/129", "completion": "\n    n = len(grid)\n    dp = [[[float('inf')] * (k + 1) for _ in range(n)] for _ in range(n)]\n    moves = ((0, 1), (0, -1), (1, 0), (-1, 0))\n    \n    def min_path(i: int, j: int, k: int):\n        if k == 0:\n            return []\n        \n        res = [grid[i][j]] + min([min_path(i+move[0], j+move[1], k-1) for move in moves \n if 0 <= i+move[0] < n and 0 <= j+move[1] < n], default=[])\n        \n        return res if (not dp[i][j][k] or res < dp[i][j][k]) and len(res) == k else []\n    \n    for i in range(n):\n        for j in range(n):\n            dp[i][j] = min_path(i, j, k)\n            \n    return"}
{"task_id": "HumanEval/129", "completion": "\n    n = len(grid)\n    dp = [[[float('inf')] * (n*n+1) for _ in range(k+1)] for _ in range(n)]\n    parent = [[[(0, 0)] * (n*n+1) for _ in range(k+1)] for _ in range(n)]\n    \n    def get_neighbors(x, y):\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n:\n                yield nx, ny\n    \n    for i in range(n):\n        for j in range(n):\n            dp[i][j][1] = grid[i][j]\n            \n    for length in range(2, k+1):\n        for x in range(n):\n            for y in range(n):\n                for nx, ny in get_neighbors(x"}
{"task_id": "HumanEval/130", "completion": "\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    else:\n        tri_seq = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                next_num = 1 + (i // 2)\n            else:\n                next_num = tri_seq[i - 1] + tri_seq[i - 2] + tri_seq[i]\n            tri_seq.append(next_num)\n        return tri_seq\n"}
{"task_id": "HumanEval/130", "completion": "\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n        \n    result = [0 for _ in range(n+1)]\n    result[0] = 3\n\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result[i] = 2 + (result[i - 1] if i > 1 else 0)\n        else:\n            result[i] = result[i - 1] + (result[i - 2] if i > 1 else 0) + 3\n    \n    return result\n"}
{"task_id": "HumanEval/130", "completion": "\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        result = [1, 3]\n        for i in range(2, n):\n            if result[i - 1] % 2 == 0:\n                result.append(int((result[i - 1]) / 2 + 1))\n            else:\n                result.append(result[-1] + result[-2] + result[-3])\n        return result\n"}
{"task_id": "HumanEval/130", "completion": "\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        result = [1, 3, 2]\n        \n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                next_number = 1 + (i // 2)\n            else:\n                next_number = result[result.index(result[-1]) - 1] + \\\n                              result[result.index(result[-2]) - 1] + \\\n                              result[result.index(result[-3]) + 1]\n            \n            result.append(next_number)\n        \n        return result[:n+1]\n"}
{"task_id": "HumanEval/130", "completion": "\n    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    else:\n        result = [3, 2]\n        for i in range(2, n):\n            result.append(result[-1] + result[-2] + 1)\n        return result\n"}
{"task_id": "HumanEval/132", "completion": "\ndef is_nested(string):\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if len(stack) > 0 and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return True if not stack else False\n"}
{"task_id": "HumanEval/132", "completion": "\ndef is_nested(string):\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if len(stack) > 0 and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0 and any('[]' in string for _ in range(2))\n"}
{"task_id": "HumanEval/132", "completion": "\ndef is_nested(string):\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if len(stack) == 0 or stack[-1] != '[':\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0 and any('[]' in string for _ in range(2))\n"}
{"task_id": "HumanEval/132", "completion": "\ndef is_nested(string):\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if len(stack) > 0 and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return True if not stack else False\n"}
{"task_id": "HumanEval/132", "completion": "\ndef is_nested(string):\n    stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if len(stack) > 0 and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0 and any('[]' in string for _ in range(2))\n"}
{"task_id": "HumanEval/133", "completion": "\n    import math\n    return sum(math.ceil(x) ** 2 for x in lst)\n\n"}
{"task_id": "HumanEval/133", "completion": "\n    import math\n    return sum(math.ceil(i**2) for i in lst)\n\n"}
{"task_id": "HumanEval/133", "completion": "\n    import math\n    return sum(math.ceil(i**2) for i in lst)\n\n"}
{"task_id": "HumanEval/133", "completion": "\n    import math\n    return sum(math.ceil(x) ** 2 for x in lst)\n\n"}
{"task_id": "HumanEval/133", "completion": "\n    import math\n    return sum([math.ceil(i**2) for i in lst])\n\n"}
{"task_id": "HumanEval/134", "completion": "\n    if not txt or not txt[-1].isalpha():\n        return False\n\n    for i in range(len(txt) - 2, -1, -1):\n        if txt[i] == ' ':\n            break\n\n        if not txt[i + 1].isalpha() and txt[i + 2:].isspace():\n            return True\n\n    return False\n"}
{"task_id": "HumanEval/134", "completion": "\ndef check_if_last_char_is_a_letter(txt):\n    if not txt or not txt[-1].isalpha():\n        return False\n        \n    for i in range(len(txt) - 2, -1, -1):\n        if not (txt[i] == ' ' and txt[i+1].isalpha()):\n            return True\n            \n    return False\n"}
{"task_id": "HumanEval/134", "completion": "\ndef check_if_last_char_is_a_letter(txt):\n    if not txt or not txt[-1].isalpha():\n        return False\n    for i in range(len(txt) - 2, -1, -1):\n        if txt[i] == ' ':\n            break\n        elif not txt[i].isalpha() and txt[i + 1] != ' ':\n            return True\n    return False\n"}
{"task_id": "HumanEval/134", "completion": "\n    if not txt or not txt[-1].isalpha():\n        return False\n\n    for i in range(len(txt) - 2, -1, -1):\n        if txt[i] == ' ':\n            break\n\n        if not txt[i+1].isalpha() and txt[i-1] == ' ':\n            return True\n            \n    return False\n"}
{"task_id": "HumanEval/134", "completion": "\ndef check_if_last_char_is_a_letter(txt):\n    if not txt or not txt[-1].isalpha():\n        return False\n    for i in range(len(txt) - 2, -1, -1):\n        if not (txt[i] == ' ' and txt[i+1].isalpha()):\n            return True\n    return False\n"}
{"task_id": "HumanEval/137", "completion": "\ndef compare_one(a, b):\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n        \n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    \n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n"}
{"task_id": "HumanEval/137", "completion": "\ndef compare_one(a, b):\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    \n    if a == b:\n        return None\n    elif max(a, b) == a:\n        return a\n    else:\n        return b\n"}
{"task_id": "HumanEval/137", "completion": "\ndef compare_one(a, b):\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n        \n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    \n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\n"}
{"task_id": "HumanEval/137", "completion": "\ndef compare_one(a, b):\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    \n    if a == b:\n        return None\n    else:\n        return max(a, b)\n"}
{"task_id": "HumanEval/137", "completion": "\ndef compare_one(a, b):\n    a = str(a).replace(',', '.')\n    b = str(b).replace(',', '.')\n\n    if float(a) > float(b):\n        return max(float(a), float(b))\n    elif float(b) > float(a):\n        return max(float(a), float(b))\n    else:\n        return None\n"}
{"task_id": "HumanEval/138", "completion": "\n    if n % 2 != 0 or n < 10:\n        return False\n\n    for i in range(2, n // 4 + 1, 2):\n        if i * 2 + (n - i) * 2 == n:\n            return True\n\n    return False\n"}
{"task_id": "HumanEval/138", "completion": "\n    if n < 10:\n        return False\n\n    for i in range(2, n // 4 * 2 - 1, 2):\n        for j in range(i + 2, n // 4 * 2 - 1, 2):\n            for k in range(j + 2, n // 4 * 2 - 1, 2):\n                for l in range(k + 2, n + \uff08n % 4) // 4 * 2 - 1, 2):\n                    if i + j + k + l == n:\n                        return True\n    return False\n"}
{"task_id": "HumanEval/138", "completion": "\n    if n < 10:\n        return False\n\n    for i in range(2, n // 2 + 1, 2):\n        if (n - i) % 2 == 0 and i % 2 == 0:\n            return True\n\n    return False\n\n"}
{"task_id": "HumanEval/138", "completion": "\n    return n % 2 == 0 and n >= 10\n\n"}
{"task_id": "HumanEval/138", "completion": "\n    if n < 10:\n        return False\n    else:\n        for i in range(2,n//4+1,2):\n            if 4*(i-2)==n-i:\n                return True\n        return False\n\n"}
{"task_id": "HumanEval/140", "completion": "\n    result = []\n    space_count = 0\n\n    for c in text:\n        if c == ' ':\n            space_count += 1\n            if space_count == 2:\n                result.append('-')\n        else:\n            if space_count > 0:\n                while space_count > 1:\n                    result.append('_')\n                    space_count -= 1\n                result.append(c)\n            else:\n                result.append(c)\n            space_count = 0\n    return ''.join(result)\n"}
{"task_id": "HumanEval/140", "completion": "\n    result = []\n    space_count = 0\n\n    for c in text:\n        if c == ' ':\n            space_count += 1\n            \n            if space_count == 2:\n                result.append('-')\n        else:\n            if space_count > 2:\n                while space_count > 2:\n                    result.append('-')\n                    space_count -= 1\n                    \n            if space_count >= 1:\n                result.append('_')\n            \n            result.append(c)\n            space_count = 0\n    \n    return ''.join(result)\n"}
{"task_id": "HumanEval/140", "completion": "\n    result = []\n    space_count = 0\n\n    for c in text:\n        if c == ' ':\n            space_count += 1\n            \n            if space_count == 2:\n                result.append('-')\n        else:\n            if space_count > 0:\n                result.append('_' * (space_count - 1))\n                space_count = 0\n                \n            result.append(c)\n            \n    return ''.join(result)\n"}
{"task_id": "HumanEval/140", "completion": "\n    result = []\n    space_count = 0\n\n    for c in text:\n        if c == ' ':\n            space_count += 1\n            \n            # If there are more than 2 consecutive spaces, replace them with -\n            if space_count > 2:\n                while space_count > 0:\n                    result.append('-')\n                    space_count -= 1\n        else:\n            # If there were any spaces before this character, replace them with _\n            if space_count > 0:\n                for i in range(space_count):\n                    result.append('_')\n                    \n                space_count = 0\n                \n            result.append(c)\n            \n    return ''.join(result)\n"}
{"task_id": "HumanEval/140", "completion": "\n    result = []\n    space_count = 0\n\n    for c in text:\n        if c == ' ':\n            space_count += 1\n            \n            if space_count == 2:\n                result.append('-')\n        else:\n            if space_count > 0:\n                result.append('_' * (space_count - 1))\n                space_count = 0\n                \n            result.append(c)\n    \n    return ''.join(result)\n"}
{"task_id": "HumanEval/141", "completion": "\n    import re\n\n    if not 1 <= len(file_name) <= 256:\n        return \"No\"\n\n    match = re.match(\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\.(txt|exe|dll)$\", file_name)\n    \n    if match and len(re.findall('\\d', file_name)) <= 3:\n        return \"Yes\"\n    else:\n        return \"No\"\n"}
{"task_id": "HumanEval/141", "completion": "\n    import re\n\n    if not 0 < len(file_name) < 5 and file_name.count('.') == 1:\n        return \"No\"\n\n    name, extension = file_name.split('.')\n\n    if (not name[0].isalpha() or not bool(re.match('^[A-Za-z]*$', name))) and len([digit for digit in name if digit.isdigit()]) <= 3:\n        return \"No\"\n    \n    if extension not in ['txt', 'exe', 'dll']:\n        return \"No\"\n\n    return \"Yes\"\n"}
{"task_id": "HumanEval/141", "completion": "\n    import re\n\n    if not 1 <= len(file_name) <= 50:\n        return \"No\"\n\n    split_name = file_name.split('.')\n    if len(split_name) != 2 or not re.match(\"^[a-zA-Z][a-zA-Z0-9]*$\", split_name[0]) or \\\n            len([m.start() for m in re.finditer('\\\\d', split_name[0])]) > 3:\n        return \"No\"\n    if split_name[1].lower() not in ['txt', 'exe', 'dll']:\n        return \"No\"\n    \n    return \"Yes\"\n"}
{"task_id": "HumanEval/141", "completion": "\n    import re\n\n    if not 0 < len(file_name) < 5 and file_name.count('.') == 1:\n        return \"No\"\n\n    name, extension = file_name.split('.')\n\n    if (not name[0].isalpha() or not bool(re.match('^[A-Za-z]*$', name))) and len([digit for digit in name if digit.isdigit()]) <= 3:\n        return \"No\"\n\n    if extension not in ['txt', 'exe', 'dll']:\n        return \"No\"\n\n    return \"Yes\"\n"}
{"task_id": "HumanEval/141", "completion": "\n    import re\n\n    if not 0 < len(file_name) < 5 and file_name.count('.') == 1:\n        return \"No\"\n\n    name, extension = file_name.split('.')\n\n    if (not name[0].isalpha() or not bool(re.match('^[A-Za-z]*$', name))) and len([digit for digit in name if digit.isdigit()]) <= 3:\n        return \"No\"\n\n    if extension not in ['txt', 'exe', 'dll']:\n        return \"No\"\n\n    return \"Yes\"\n"}
{"task_id": "HumanEval/142", "completion": "\n    return sum(lst[i] ** (3 if i % 4 == 0 else 2) for i in range(len(lst)))\n\n"}
{"task_id": "HumanEval/142", "completion": "\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            sum += lst[i]**2\n        elif i % 4 == 0:\n            sum += lst[i]**3\n        else:\n            sum += lst[i]\n    return sum\n"}
{"task_id": "HumanEval/142", "completion": "\n    return sum(x**3 if i%4==0 and not i%3==0 else x**2 for i, x in enumerate(lst))\n\n"}
{"task_id": "HumanEval/142", "completion": "\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum\n"}
{"task_id": "HumanEval/142", "completion": "\n    result = 0\n    for idx, elem in enumerate(lst):\n        if idx % 3 == 0 and idx % 4 != 0:\n            result += elem ** 2\n        elif idx % 4 == 0:\n            result += elem ** 3\n        else:\n            result += elem\n    return result\n"}
{"task_id": "HumanEval/143", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split(' ')\n    result = []\n\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n\n    return \" \".join(result)\n"}
{"task_id": "HumanEval/143", "completion": "\ndef words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    words = sentence.split()\n    result = [word for word in words if is_prime(len(word))]\n    return ' '.join(result)\n"}
{"task_id": "HumanEval/143", "completion": "\ndef words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    words = sentence.split()\n    result = [word for word in words if is_prime(len(word))]\n    return ' '.join(result)\n"}
{"task_id": "HumanEval/143", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    result = [word for word in words if is_prime(len(word))]\n\n    return \" \".join(result)\n"}
{"task_id": "HumanEval/143", "completion": "\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split(' ')\n    result = []\n\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n\n    return ' '.join(result)\n"}
{"task_id": "HumanEval/144", "completion": "\n    def gcd(a, b):\n        while b != 0:\n            a, b = b, a % b\n        return a\n\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n\n    common_divisor = gcd(x_denom * n_denom, x_num * n_num)\n\n    return (x_num * n_num * common_divisor) % (x_denom * n_denom) == 0\n"}
{"task_id": "HumanEval/144", "completion": "\n    def gcd(a, b):\n        while b != 0:\n            a, b = b, a % b\n        return a\n\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n\n    common_divisor = gcd(x_denom * n_denom, x_num * n_num)\n\n    return (x_num * n_num * gcd(x_denom, n_denom)) % common_divisor == 0\n"}
{"task_id": "HumanEval/144", "completion": "\n    def gcd(a, b):\n        while b != 0:\n            a, b = b, a % b\n        return a\n\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n\n    common_divisor = gcd(x_denom * n_denom, x_num * n_num)\n\n    return (x_num * n_num * gcd(x_denom, n_denom)) % common_divisor == 0\n"}
{"task_id": "HumanEval/144", "completion": "\n    def gcd(a, b):\n        while b != 0:\n            a, b = b, a % b\n        return a\n\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n\n    common_divisor = gcd(x_denom * n_denom, x_num * n_num)\n\n    return (x_num * n_num * gcd(x_denom, n_denom)) % common_divisor == 0\n"}
{"task_id": "HumanEval/144", "completion": "\n    def gcd(a, b):\n        while b != 0:\n            a, b = b, a % b\n        return a\n\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n\n    common_factor = gcd(x_denom * n_denom, x_num * n_num)\n\n    return (x_num * n_num * common_factor) % (x_denom * n_denom) == 0\n\n"}
{"task_id": "HumanEval/145", "completion": "\n    def sum_of_digits(n):\n        return abs(sum([int(d) for d in str(n)]))\n\n    nums.sort()\n    nums.sort(key=sum_of_digits)\n    \n    return nums\n\n"}
{"task_id": "HumanEval/145", "completion": "\n    def sum_of_digits(n):\n        return abs(sum([int(d) for d in str(n)]))\n\n    nums.sort()\n    nums.sort(key=sum_of_digits)\n\n    return nums\n\n"}
{"task_id": "HumanEval/145", "completion": "\n    def sum_of_digits(n):\n        return abs(sum([int(d) for d in str(n)]))\n        \n    nums.sort(key=lambda x: (sum_of_absolute_digits(x), nums.index(x)))\n    \n    return nums\n"}
{"task_id": "HumanEval/145", "completion": "\n    def sum_of_digits(n):\n        return abs(sum([int(i) for i in str(n)]))\n\n    nums.sort() # sort by value first\n    nums.sort(key=sum_of_digits)  # then sort by the sum of digits\n    \n    return nums\n"}
{"task_id": "HumanEval/145", "completion": "\n    def sum_of_digits(n):\n        return abs(sum([int(i) for i in str(n)]))\n\n    nums.sort() # sort by value first\n    nums.sort(key=sum_of_digits)  # then sort by the sum of digits\n\n    return nums\n"}
{"task_id": "HumanEval/146", "completion": "\ndef specialFilter(nums):\n    count = 0\n    for num in nums:\n        if abs(num) > 10 and str(abs(num))[0] in '13579' and str(abs(num))[-1] in '13579':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/146", "completion": "\n    def check_digits(n):\n        if n < 0:\n            n = -n\n        return str(n)[0] in '13579' and str(n)[-1] in '13579'\n\n    count = 0\n    for num in nums:\n        if num > 10 and check_digits(num):\n            count += 1\n\n    return count\n"}
{"task_id": "HumanEval/146", "completion": "\ndef specialFilter(nums):\n    count = 0\n    for num in nums:\n        if abs(num) > 10 and str(abs(num))[0] in '13579' and str(abs(num))[-1] in '13579':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/146", "completion": "\n    def check_digits(num):\n        if num < 0:\n            num = -num\n        return str(num)[0] in '13579' and str(num)[-1] in '13579'\n\n    count = 0\n    for num in nums:\n        if num > 10 and check_digits(num):\n            count += 1\n\n    return count\n"}
{"task_id": "HumanEval/146", "completion": "\n    def check_digits(num):\n        if num < 0:\n            num = -num\n        return str(num)[0] in '13579' and str(num)[-1] in '13579'\n\n    count = 0\n    for num in nums:\n        if num > 10 and check_digits(num):\n            count += 1\n\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "\n    def get_max_triples(n):\n        arr = [i * i - i + 1 for i in range(1, n+1)]\n        count = 0\n        mods = {0: [], 1: [], 2: []}\n        \n        for num in arr:\n            mods[num % 3].append(num)\n            \n        if len(mods[0]) >= 3:\n            count += (len(mods[0]) * (len(mods[0]) - 1) * (len(mods[0]) - 2)) // 6\n        \n        if len(mods[1]) >= 3:\n            count += ((len(mods[1]) * (len(mods[1]) - 1) * (len(mods[1]) - 2)) // 6)*3\n            \n        if len(mods[2]) >= 3:\n            count += ((len(mods[2]) * (len(mods[2]) - 1) * (len(mods[2]) - 2)) // 6)*3\n        \n"}
{"task_id": "HumanEval/147", "completion": "\n    def get_max_triples(n):\n        arr = [i * i - i + 1 for i in range(1, n+1)]\n        count = 0\n        freq = {x % 3: 0 for x in arr}\n        \n        for num in arr:\n            freq[num%3] += 1\n            \n        count += (freq[0]*(freq[0]-1)*(freq[0]-2))//6 # triplets with sum divisible by 3\n        count += (freq[1]*freq[2]*(freq[1]+freq[2]))//2 # pairs of elements that add up to a multiple of 3\n        \n        return count\n"}
{"task_id": "HumanEval/147", "completion": "\n    def get_max_triples(n):\n        arr = [i * i - i + 1 for i in range(1, n+1)]\n        count = 0\n        freq = {x % 3: 0 for x in arr}\n        \n        for num in arr:\n            freq[num%3] += 1\n            \n        count += (freq[0]*(freq[0]-1)*(freq[0]-2))//6 # choose 3 numbers from each group of 0s\n        count += (freq[1]*freq[2]) # choose 2 numbers from one group and 1 number from the other\n        \n        for i in range(1,3):\n            j = (3-i)%3\n            count += ((freq[i]*(freq[i]-1))//2)*freq[j] # choose 2 numbers from one group and all numbers from another\n            \n        return count\n"}
{"task_id": "HumanEval/147", "completion": "\n    def get_max_triples(n):\n        arr = [i * i - i + 1 for i in range(1, n+1)]\n        count = 0\n        freq = {x % 3 : 0 for x in arr}\n        \n        for num in arr:\n            freq[num%3] += 1\n            \n        count += (freq[0]*(freq[0]-1)*(freq[0]-2))//6 # combination of 3 numbers from the group of 0's\n        count += (freq[1]*freq[2]) * freq[0]           # combination of 1 number from the group of 1's and 2's with any number from the group of 0's\n        \n        return count\n"}
{"task_id": "HumanEval/147", "completion": "\n    def get_max_triples(n):\n        a = [i * i - i + 1 for i in range(1, n+1)]\n        count = 0\n        mods = {0: [], 1: [], 2: []}\n        \n        for num in a:\n            mods[num % 3].append(num)\n            \n        if len(mods[0]) >= 3:\n            count += (len(mods[0]) * (len(mods[0]) - 1) * (len(mods[0]) - 2)) // 6\n        \n        if len(mods[1]) >= 3:\n            count += ((len(mods[1]) * (len(mods[1]) - 1) * (len(mods[1]) - 2)) // 6)*3\n            \n        if len(mods[2]) >= 3:\n            count += ((len(mods[2]) * (len(mods[2]) - 1) * (len(mods[2]) - 2)) // 6)*3\n        \n"}
{"task_id": "HumanEval/148", "completion": "\ndef bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \n               \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if (planet1 not in planets) or (planet2 not in planets):\n        return ()\n        \n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    \n    return tuple(planets[start+1:end])\n"}
{"task_id": "HumanEval/148", "completion": "\ndef bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \n               \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if (planet1 not in planets) or (planet2 not in planets):\n        return ()\n        \n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    \n    return tuple(planets[start+1:end])\n"}
{"task_id": "HumanEval/148", "completion": "\ndef bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \n               \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if (planet1 not in planets) or (planet2 not in planets):\n        return ()\n        \n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    \n    return tuple(planets[start+1:end])\n"}
{"task_id": "HumanEval/148", "completion": "\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    start_idx = min(planets.index(planet1), planets.index(planet2))\n    end_idx = max(planets.index(planet1), planets.index(planet2))\n\n    return tuple(planets[start_idx+1:end_idx])\n"}
{"task_id": "HumanEval/148", "completion": "\ndef bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \n               \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if (planet1 not in planets) or (planet2 not in planets):\n        return ()\n        \n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    \n    return tuple(planets[start+1:end])\n"}
{"task_id": "HumanEval/156", "completion": "\n    roman = {1000:'m', 900:'cm', 500:'d', 400:'cd', 100:'c', 90:'xc', \n             50:'l', 40:'xl', 10:'x',  9:'ix',  5:'v',  4:'iv', 1:'i'}\n    numeral = ''\n    \n    for key in sorted(roman.keys(), reverse=True):\n        while number >= key:\n            numeral += roman[key]\n            number -= key\n            \n    return numeral.replace('iiii','iv').replace('viv','ix').replace('xix','xc')\n"}
{"task_id": "HumanEval/156", "completion": "\n    roman = {1000:'m', 900:'cm', 500:'d', 400:'cd', 100:'c', 90:'xc', 50:'l', 40:'xl', 10:'x', 9:'ix', 5:'v', 4:'iv', 1:'i'}\n    result = ''\n    \n    for key in sorted(roman.keys(), reverse=True):\n        while number >= key:\n            result += roman[key]\n            number -= key\n            \n    return result\n"}
{"task_id": "HumanEval/156", "completion": "\n    roman = {1000:'m', 900:'cm', 500:'d', 400:'cd', 100:'c',  90:'xc', 50:'l', 40:'xl', 10:'x',\n             9:'ix', 5:'v', 4:'iv', 1:'i'}\n    result = ''\n    \n    for key in sorted(roman.keys(), reverse=True):\n        while number >= key:\n            result += roman[key]\n            number -= key\n            \n    return result\n"}
{"task_id": "HumanEval/156", "completion": "\n    roman = {1000:'m', 900:'cm', 500:'d', 400:'cd', 100:'c', 90:'xc', \n             50:'l', 40:'xl', 10:'x', 9:'ix', 5:'v', 4:'iv', 1:'i'}\n    numeral = ''\n    \n    for key in sorted(roman.keys(), reverse=True):\n        while number >= key:\n            numeral += roman[key]\n            number -= key\n            \n    return numeral\n"}
{"task_id": "HumanEval/156", "completion": "\n    roman = {1000:'m', 900:'cm', 500:'d', 400:'cd', 100:'c', 90:'xc',\n             50:'l',  40:'xl', 10:'x',   9:'ix',  5:'v',  4:'iv', 1:'i'}\n    numeral = ''\n    \n    for key in sorted(roman.keys(), reverse=True):\n        while number >= key:\n            numeral += roman[key]\n            number -= key\n            \n    return numeral\n"}
{"task_id": "HumanEval/160", "completion": "\n    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//' and operand[i] != 0:\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n    return result\n"}
{"task_id": "HumanEval/160", "completion": "\n    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//' and operand[i] != 0:\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n    return result\n"}
{"task_id": "HumanEval/160", "completion": "\n    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//' and operand[i] != 0:\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n    return result\n"}
{"task_id": "HumanEval/160", "completion": "\n    result = operand[0]\n    for i in range(1, len(operand)):\n        if operator[i-1] == '+':\n            result += operand[i]\n        elif operator[i-1] == '-':\n            result -= operand[i]\n        elif operator[i-1] == '*':\n            result *= operand[i]\n        elif operator[i-1] == '//' and operand[i] != 0:\n            result //= operand[i]\n        elif operator[i-1] == '**':\n            result **= operand[i]\n    return result\n"}
{"task_id": "HumanEval/160", "completion": "\n    result = operand[0]\n    for idx in range(1, len(operand)):\n        if operator[idx-1] == '+':\n            result += operand[idx]\n        elif operator[idx-1] == '-':\n            result -= operand[idx]\n        elif operator[idx-1] == '*':\n            result *= operand[idx]\n        elif operator[idx-1] == '//' and operand[idx] != 0:\n            result //= operand[idx]\n        elif operator[idx-1] == '**':\n            result **= operand[idx]\n    return result\n"}
{"task_id": "HumanEval/163", "completion": "\n    if a > b:\n        a, b = b, a\n\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n\n"}
{"task_id": "HumanEval/163", "completion": "\n    if a > b:\n        a, b = b, a\n\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n\n"}
{"task_id": "HumanEval/163", "completion": "\n    result = []\n    for i in range(min(a, b), max(a, b) + 1):\n        if i % 2 == 0:\n            result.append(i)\n    return result\n\n"}
{"task_id": "HumanEval/163", "completion": "\n    if a > b:\n        a, b = b, a\n\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n\n"}
{"task_id": "HumanEval/163", "completion": "\n    if a > b:\n        a, b = b, a\n\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n\n"}
{"task_id": "HumanEval/32", "completion": "\n    def f(x):\n        return poly(xs, x)\n\n    def df(x):\n        # derivative of the polynomial\n        return sum([i * coeff * math.pow(x, i - 1) for i, coeff in enumerate(xs)])\n\n    x = 0.0\n    while abs(f(x)) > 1e-6:\n        x = x - f(x) / df(x)\n\n    return x\n"}
{"task_id": "HumanEval/32", "completion": "\n    def f(x): return poly(xs, x)\n    def df(x):\n        h = 0.00001\n        return (f(x+h) - f(x)) / h\n        \n    guess = len(xs)/2  # Start with a reasonable initial guess\n    while abs(f(guess)) > 0.00001:  # Continue until we're close enough to the root\n        guess -= f(guess) / df(guess)  # Use Newton-Raphson iteration\n    return guess\n"}
{"task_id": "HumanEval/32", "completion": "\n    def f(x):\n        return poly(xs, x)\n\n    def df(x):\n        # derivative of the polynomial\n        return sum([i * coeff * math.pow(x, i - 1) for i, coeff in enumerate(xs)])\n\n    x = 0.0\n    while abs(f(x)) > 1e-6:\n        x = x - f(x) / df(x)\n\n    return round(x, 2)\n"}
{"task_id": "HumanEval/32", "completion": "\n    def f(x):\n        return poly(xs, x)\n\n    def df(x):\n        # derivative of the polynomial\n        return sum([i * coeff * math.pow(x, i - 1) for i, coeff in enumerate(xs)])\n\n    x = 0.0\n    while abs(f(x)) > 1e-6:\n        x = x - f(x) / df(x)\n\n    return x\n"}
{"task_id": "HumanEval/32", "completion": "\n    def f(x): return poly(xs, x)\n    def df(x):\n        h = 0.00001\n        return (f(x + h) - f(x)) / h\n        \n    guess = len(xs)/2  # Start with a guess at the middle of the domain\n    while abs(f(guess)) > 0.00001:  # Continue until close enough to root\n        guess -= f(guess) / df(guess)  # Use Newton-Raphson iteration\n    return guess\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group back. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) ==  3 else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # un-cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1:] + group[:-1]) if len(group) == len(s) else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group back. Unless group has fewer elements than 3.\n    groups = [(group[-1:] + group[:-1]) if len(group) ==3 else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group back. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) ==  3 else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/38", "completion": "\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1:] + group[:-1]) if len(group) == len(s) else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/113", "completion": "\n    def count_odd(s):\n        return sum([int(c) % 2 for c in s])\n\n    result = []\n\n    for idx, elem in enumerate(lst):\n        odd_numbers = count_odd(elem)\n        template = \"the number of odd elements {}n the str{}ng {} of the {}nput.\"\n        result.append(template.format(odd_numbers, odd_numbers, idx, idx))\n        \n    return result\n"}
{"task_id": "HumanEval/113", "completion": "\n    result = []\n    for idx, string in enumerate(lst):\n        count = 0\n        for char in string:\n            if int(char) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, idx, count, idx))\n    return result\n"}
{"task_id": "HumanEval/113", "completion": "\n    def count_odd(s):\n        return sum([int(c) % 2 for c in s])\n\n    result = []\n\n    for idx, elem in enumerate(lst):\n        odd_numbers = count_odd(elem)\n        template = \"the number of odd elements {}n the str{}ng {} of the {}nput.\"\n        result.append(template.format(odd_numbers, odd_numbers, idx+1, idx+1))\n    return result\n"}
{"task_id": "HumanEval/113", "completion": "\n    result = []\n    for idx, s in enumerate(lst):\n        count = 0\n        for c in s:\n            if int(c) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, idx, count, idx))\n    return result\n"}
{"task_id": "HumanEval/113", "completion": "\n    def count_odd(s):\n        return sum((int(c) % 2 != 0 for c in s))\n\n    result = []\n    for idx, elem in enumerate(lst):\n        odd_numbers = count_odd(elem)\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(odd_numbers, odd_numbers, odd_numbers, odd_numbers))\n    return result\n"}
{"task_id": "HumanEval/151", "completion": "\n    if not lst:\n        return 0\n\n    result = 0\n    for num in lst:\n        if num > 0 and type(num) == int and num % 2 == 1:\n            result += 2 * (num ** 2)\n            \n    return result\n"}
{"task_id": "HumanEval/151", "completion": "\n    if not lst:\n        return 0\n\n    result = 0\n    for num in lst:\n        if num > 0 and num % 2 == 1:\n            result += (num - abs(num))**2\n            \n    return result\n\n"}
{"task_id": "HumanEval/151", "completion": "\n    if not lst:\n        return 0\n        \n    result = 0\n    for num in lst:\n        if num > 0 and type(num) == int and num % 2 == 1:\n            result += (num - abs(num))**2 * 2\n            \n    return result\n"}
{"task_id": "HumanEval/151", "completion": "\n    if not lst:\n        return 0\n        \n    result = 0\n    for num in lst:\n        if num > 0 and type(num) == int and num % 2 != 0:\n            result += (num - abs(num))**2 * 2\n            \n    return result\n"}
{"task_id": "HumanEval/151", "completion": "\n    if not lst:\n        return 0\n\n    result = 0\n    for num in lst:\n        if num > 0 and num % 2 == 1:\n            result += (num - 1) ** 2 + (num + 1) ** 2\n            \n    return result\n"}
