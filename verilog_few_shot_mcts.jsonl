{"task_id": "dff8ar", "completion": "\n\talways @(posedge clk or posedge areset) begin\n\t\tif (areset) \n\t\t\tq <= 8'b0;\n\t\telse \n\t\t\tq <= d;\n\tend\nendmodule\n\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "8.0329s", "mean_test_time": "0.2768s"}}
{"task_id": "kmap3", "completion": "\n\talways @(*) begin\n\t\tif(c==0 && d==1)\n\t\t\tout = 0;\n\t\telse if (a==0 && b==0 && c==1 && d==0)\n\t\t\tout = 0;\n\t\telse if (a==0 && b==1 && c==0 && d==0)\n\t\t\tout = 1;\n\t\telse \n\t\t\tout = d; //d can be any value here.\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 33, "eval_time": "171.2263s", "mean_test_time": "0.2522s"}}
{"task_id": "lemmings1", "completion": "\n\treg [1:0] state;\n\tparameter [1:0] LEFT = 2'b00, RIGHT = 2'b01;\n\t\n\t// State transition logic\n\talways @(posedge clk or posedge areset) begin\n\t\tif (areset)\n\t\t\tstate <= LEFT;\n\t\telse if ((bump_left && !bump_right) || (!bump_left && bump_right)) \n\t\t\tstate <= RIGHT;\n\t\telse if (bump_left && bump_right)\n\t\t\tstate <= state; // maintain current state\n\tend\n\t\n\t// Output logic\n\tassign walk_left = (state == LEFT);\n\tassign walk_right = (state == RIGHT);\n\t\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 24, "eval_time": "246.2689s", "mean_test_time": "0.3189s"}}
{"task_id": "2013_q2afsm", "completion": "\n\t\n\tlocalparam A = 2'b00;\n\tlocalparam B = 2'b01;\n\tlocalparam C = 2'b10;\n\tlocalparam D = 2'b11;\n\treg [1:0] state, next_state;\n\t\n\t// State table\n\talways @(*) begin\n\t\tcase (state) \n\t\t\tA: if (r[3]) next_state = B;\n\t\t\t   else if (r[2]) next_state = C;\n\t\t\t   else if (r[1]) next_state = D;\n\t\t\t   else next_state = A;\n\t\t\tB: if (~r[3]) next_state = A;\n\t\t\t   else next_state = B;\n\t\t\tC: if (~r[2]) next_state = A;\n\t\t\t   else next_state = C;\n\t\t\tD: if (~r[1]) next_state = A;\n\t\t\t   else next_state = D;\n\t\tendcase\n\tend\n\t\n\t// State flip-flops\n\talways @(posedge clk or negedge resetn) begin\n", "stats": {"num_rollouts": 128, "num_generations": 39, "eval_time": "576.8295s", "mean_test_time": "0.2081s"}}
{"task_id": "fsm_hdlc", "completion": "\n\treg [3:0] state;\n\t\n\tparameter S0 = 4'b0000;\n\tparameter S1 = 4'b0001;\n\tparameter S2 = 4'b0010;\n\tparameter S3 = 4'b0011;\n\tparameter S4 = 4'b0100;\n\tparameter S5 = 4'b0101;\n\tparameter S6 = 4'b0110;\n\tparameter S7 = 4'b0111;\n\tparameter S8 = 4'b1000;\n\t\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset) \n\t\t\tstate <= S0;\n\t\telse case (state)\n\t\t\tS0: if (in) state <= S1;\n\t\t\tS1: if (~in) state <= S2;\n\t\t\tS2: if (in) state <= S3;\n\t\t\tS3: if (in) state <= S4;\n\t\t\tS4: if (in) state <= S5;\n\t\t\tS5: if (in) begin \n\t\t\t\tstate <= S", "stats": {"num_rollouts": 128, "num_generations": 34, "eval_time": "459.7260s", "mean_test_time": "0.1740s"}}
{"task_id": "bugs_mux2", "completion": "\n\n\tassign out = (~sel & a) | (sel & b);\n\nendmodule\n```\nThe bug in the code is that it's assigning an 8-bit output to a single bit. The fix is to change 'out' from a reg to [7:0] so it can hold an 8-bit value instead of just one bit.\n\nDescription:\n", "stats": {"num_rollouts": 128, "num_generations": 29, "eval_time": "113.0810s", "mean_test_time": "0.1999s"}}
{"task_id": "review2015_count1k", "completion": "\n\t\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  // Reset condition\n\t\t\tq <= 10'd0;\n\t\telse if (q == 10'd999)   // Wrap around condition\n\t\t\tq <= 10'd0;\n\t\telse\n\t\t\tq <= q + 10'd1;       // Increment counter\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 29, "eval_time": "137.1627s", "mean_test_time": "0.3120s"}}
{"task_id": "circuit8", "completion": "\n\treg p_reg;\n\talways @(posedge clock) begin\n\t\tp <= a;\n\t\tp_reg <= a;\n\t\tif (p == p_reg && p == 1'b0) \n\t\t\tq <= ~q;\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 35, "eval_time": "258.1486s", "mean_test_time": "0.3074s"}}
{"task_id": "m2014_q4e", "completion": "\n\tassign out = ~(in1 | in2);\nendmodule\n\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "1.6759s", "mean_test_time": "0.2697s"}}
{"task_id": "vector4", "completion": "\n\tassign out = { {24{in[7]}}, in };\nendmodule\n\n", "stats": {"num_rollouts": 16, "num_generations": 3, "eval_time": "8.8812s", "mean_test_time": "0.1879s"}}
{"task_id": "2014_q3fsm", "completion": "\n\n\ttypedef enum {A, B1, B2, B3} state_type;\n\tstate_type state;\n\treg [1:0] count;\n\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset) begin\n\t\t\tz <= 0;\n\t\t\tcount <= 0;\n\t\t\tstate <= A;\n\t\tend else case (state) \n\t\t\tA : if (s == 1'b0) state <= B1;\n\t\t\tB1: if (s == 1'b1) begin state <= B2; count <= 2'b00; end\n\t\t\tB2: begin \n\t\t\t\tif(count < 3) begin\n\t\t\t\t\tif(w == 1'b1) count <= count + 1;\n\t\t\t\t\telse count <= 0;\n\t\t\t\tend else begin\n\t\t\t\t\tstate <= B3;\n\t\t\t\t\tz <= 1'b1;\n\t\t\t\tend\n\t\t\tend\n\t\t\tB3: if (s == 1'b0) state <= A;\n\t\tendcase\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 29, "eval_time": "376.8026s", "mean_test_time": "0.1894s"}}
{"task_id": "zero", "completion": "\n\tassign zero = 1'b0;\nendmodule\n\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "1.4553s", "mean_test_time": "0.2297s"}}
{"task_id": "always_if2", "completion": "\nalways @(*) begin\n\tif (cpu_overheated)\n\t    shut_off_computer = 1;\n\telse \n\t    shut_off_computer = 0;\nend\n\nalways @(*) begin\n\tif (~arrived & ~gas_tank_empty)\n\t   keep_driving = 1;\n\telse if (arrived | gas_tank_empty)\n\t   keep_driving = 0;\nend\n\nendmodule\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "6.6045s", "mean_test_time": "0.2322s"}}
{"task_id": "counter_2bc", "completion": "\n\talways @(posedge clk or posedge areset) begin\n        if (areset) \n            state <= 2'b01;\n        else if (train_valid && train_taken && state < 3'd3) \n            state <= state + 1;\n        else if (train_valid && !train_taken && state > 3'd0) \n            state <= state - 1;\n    end\nendmodule\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "6.2242s", "mean_test_time": "0.2435s"}}
{"task_id": "circuit1", "completion": "\n\tassign q = (~a & ~b) | (a & b);\nendmodule\n\n```\n\nDescription:\n", "stats": {"num_rollouts": 128, "num_generations": 27, "eval_time": "86.7450s", "mean_test_time": "0.2174s"}}
{"task_id": "andgate", "completion": "\n\tassign out = a & b;\nendmodule\n\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "1.4221s", "mean_test_time": "0.2315s"}}
{"task_id": "mux9to1v", "completion": "\nalways_comb begin\n\tcase(sel) \n\t\t4'b0000: out = a;\n\t\t4'b0001: out = b;\n\t\t4'b0010: out = c;\n\t\t4'b0011: out = d;\n\t\t4'b0100: out = e;\n\t\t4'b0101: out = f;\n\t\t4'b0110: out = g;\n\t\t4'b0111: out = h;\n\t\t4'b1000: out = i;\n\t\tdefault: out = 16'hFFFF; // All bits set to 1 for sel > 9.\n\tendcase\nend\nendmodule\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "9.7135s", "mean_test_time": "0.2447s"}}
{"task_id": "2012_q1g", "completion": "\n\n\tassign f = (x[2] & x[1]) | (~x[3] & ~x[4]);\nendmodule\n\n", "stats": {"num_rollouts": 128, "num_generations": 42, "eval_time": "133.2809s", "mean_test_time": "0.2354s"}}
{"task_id": "step_one", "completion": "\n\tassign one = 1'b1;\nendmodule\n\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "1.4750s", "mean_test_time": "0.2320s"}}
{"task_id": "count1to10", "completion": "\n\t\n\talways @(posedge clk) begin\n\t\tif (reset) \n\t\t\tq <= 4'b0001;\n\t\telse if (q == 4'b1010)\n\t\t\tq <= 4'b0001;\n\t\telse\n\t\t\tq <= q + 1;\n\tend\nendmodule\n", "stats": {"num_rollouts": 69, "num_generations": 10, "eval_time": "56.0993s", "mean_test_time": "0.2397s"}}
{"task_id": "m2014_q4d", "completion": "\n\t\n\tDFF dff (\n\t\t.clk(clk), \n\t\t.d(in ^ out), \n\t\t.q(out)\n\t);\nendmodule\n\nmodule DFF (\n\tinput clk,\n\tinput d,\n\toutput reg q\n);\n\talways @(posedge clk) begin\n\t\tq <= d;\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 31, "eval_time": "146.5067s", "mean_test_time": "0.2026s"}}
{"task_id": "fsm1", "completion": "\n\treg state; // 1-B, 0-A\n\t\n\talways @(posedge clk or posedge areset) begin\n\t\tif (areset)\n\t\t\tstate <= 1'b1; // Reset to B\n\t\telse\n\t\t\tcase ({state, in}) \n\t\t\t\t2'b00: state <= 1'b1; // A->B\n\t\t\t\t2'b01: state <= 1'b0; // A->A\n\t\t\t\t2'b10: state <= 1'b1; // B->B\n\t\t\t\t2'b11: state <= 1'b0; // B->A\n\t\t\tendcase\n\tend\n\tassign out = state;\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 30, "eval_time": "269.9230s", "mean_test_time": "0.2367s"}}
{"task_id": "bugs_case", "completion": "\n\talways @(*) begin\n\t\tcase (code)\n\t\t\t8'h45: begin  // 'E' key\n\t\t\t\tout = 4'd1;\n\t\t\t\tvalid = 1'b1;\n\t\t\tend\n\t\t\t8'h16: begin  // 'Q' key\n\t\t\t\tout = 4'd2;\n\t\t\t\tvalid = 1'b1;\n\t\t end\n\t\t\t8'h1e: begin  // 'W' key\n\t\t\t\tout = 4'd3;\n\t\t\t\tvalid = 1'b1;\n\t\t\tend\n\t\t\t8'h26: begin  // 'A' key\n\t\t\t\tout = 4'd4;\n\t\t\t\tvalid = 1'b1;\n\t\t\tend\n\t\t\t8'h25: begin  // 'Z' key\n\t\t\t\tout = 4'd5;\n\t\t\t\tvalid = 1'b1;\n\t\t\tend\n\t\t\t8'h2e: begin  // 'C' key\n\t\t\t\tout = 4'd6;\n\t\t\t\tvalid = 1'b1;\n\t\t\tend\n\t\t\t8'h36: begin  // 'X' key\n\t\t\t\tout = 4'd7;\n\t\t\t\tvalid = 1'", "stats": {"num_rollouts": 128, "num_generations": 28, "eval_time": "369.0735s", "mean_test_time": "0.1593s"}}
{"task_id": "dff16e", "completion": "\n\t\n\talways @(posedge clk or negedge resetn) begin\n\t\tif (!resetn)\n\t\t\t\t\t\t\t  q <= 16'b0;\n\t\telse if (byteena[1]) q <= {q[15:8], d[15:8]};\n\t\telse if (byteena[0]) q <= {d[7:0], q[15:9]};\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 26, "eval_time": "150.5744s", "mean_test_time": "0.2448s"}}
{"task_id": "fsm_onehot", "completion": "\n\t\n\tassign next_state =\n\t\t~(state[8:0]) & {9{in}} | // S0 --0--> S0\n\t\t(state[7:0] & ~state[8]) | // S0 --1--> S1\n\t\t(state[6:0] & ~state[7]) | // S1 --0--> S0\n\t\t(state[5:0] & ~state[6]) | // S1 --1--> S2\n\t\t(state[4:0] & ~state[5]) | // S2 --0--> S0\n\t\t(state[3:0] & ~state[4]) | // S2 --1--> S3\n\t\t(state[2:0] & ~state[3]) | // S3 --0--> S0\n\t\t(state[1:0] & ~state[2]) | // S3 --1--> S4\n\t\t(state[0]   & ~state[1]) ;// S4 --0--> S0\n\t\t\n\tassign out1 = state[7]; \t// Outputs are only set when the state is S5 or S6.\n\tassign", "stats": {"num_rollouts": 128, "num_generations": 40, "eval_time": "504.4496s", "mean_test_time": "0.1926s"}}
{"task_id": "conditional", "completion": "\n\talways @* begin\n\t\tif (a < b && a < c && a < d) \n\t\t\tmin = a;\n\t\telse if (b < a && b < c && b < d) \n\t\t\tmin = b;\n\t\telse if (c < a && c < b && c < d) \n\t\t\tmin = c;\n\t\telse \n\t\t\tmin = d;\n\tend\nendmodule\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "5.6756s", "mean_test_time": "0.2404s"}}
{"task_id": "gates4", "completion": "\n\tassign out_and = &in;\n\tassign out_or = |in;\n\tassign out_xor = ^in;\nendmodule\n\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "2.9887s", "mean_test_time": "0.2418s"}}
{"task_id": "review2015_fancytimer", "completion": "\nreg [3:0] delay;\nreg [11:0] counter;\nwire pattern_detected;\n\nassign pattern_detected = (counter[11:8] == 4'b1101);\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin\n        delay <= 4'd0;\n        counter <= 12'd0;\n        counting <= 1'b0;\n        done <= 1'b0;\n    end else begin\n        if (!counting && pattern_detected) begin\n            delay <= counter[3:0];\n            counter <= 12'd0;\n            counting <= 1'b1;\n        end else if (counting) begin\n            counter <= counter + 12'd1;\n            if (counter == {~delay[3], 4'hF}) begin\n                counting <= 1'b0;\n                done <= 1'b1;\n            end\n        end else if (done && ack) begin\n            done <= 1'b0;\n        end\n    end\nend\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) begin", "stats": {"num_rollouts": 128, "num_generations": 32, "eval_time": "475.9935s", "mean_test_time": "0.1639s"}}
{"task_id": "ece241_2013_q4", "completion": "\n\t// State Machine\n\treg [1:0] state;\n\tparameter S_LOW = 2'b00;  // Low water level\n\tparameter S_MIDHIGH = 2'b01;  // Water level between s[3] and s[2]\n\tparameter S_MIDLOW = 2'b10;  // Water level between s[2] and s[1]\n\tparameter S_HIGH = 2'b11;  // High water level\n\n\t// State transition logic\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset)\n\t\t\tstate <= S_LOW;\n\t\telse\n\t\t\tcase (state)\n\t\t\t\tS_LOW: if (!s[3]) state <= S_MIDHIGH;\n\t\t\t\t\t   else if (s[1] && s[2] && !s[3]) state <= S_LOW;\n\t\t\t\tS_MIDHIGH: if (s[3]) state <= S_HIGH;\n\t\t\t\t\t\t\telse if (!s[2] || !s[1]) state <= S_MIDLOW;\n\t\t\t\tS_MIDLOW: if (s[1]", "stats": {"num_rollouts": 128, "num_generations": 36, "eval_time": "508.4922s", "mean_test_time": "0.1827s"}}
{"task_id": "mux256to1v", "completion": "\n\n\tassign out = in[(sel+1)*4-1:sel*4];\n\t\nendmodule\n\n```\n\nDescription:\n", "stats": {"num_rollouts": 128, "num_generations": 27, "eval_time": "64.4288s", "mean_test_time": "0.1539s"}}
{"task_id": "hadd", "completion": "\n\tassign sum = a ^ b;\n\tassign cout = a & b;\nendmodule\n\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "2.0596s", "mean_test_time": "0.2721s"}}
{"task_id": "circuit9", "completion": "\n\t\n\treg [2:0] next_q;\n\talways @(*) begin\n\t\tcase({a, q})\n\t\t\t5'b111 : next_q = 3'd4;\n\t\t\t5'b110 : next_q = 3'd7;\n\t\t\t5'b101 : next_q = 3'd2;\n\t\t\t5'b100 : next_q = 3'd6;\n\t\t\t5'b011 : next_q = 3'd1;\n\t\t\t5'b010 : next_q = 3'd5;\n\t\t\t5'b001 : next_q = 3'd0;\n\t\t\tdefault: next_q = q;\n\t\tendcase\n\tend\n\talways @(posedge clk) begin\n\t\tq <= next_q;\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 32, "eval_time": "260.8779s", "mean_test_time": "0.2156s"}}
{"task_id": "ece241_2013_q7", "completion": "\n\talways @(posedge clk) begin\n\t\tif (!j && !k) \n\t\t\tQ <= Q;\n\t\telse if (!j && k) \n\t\t\tQ <= 0;\n\t\telse if (j && !k) \n\t\t\tQ <= 1;\n\t\telse if (j && k) \n\t\t\tQ <= ~Q;\n\tend\nendmodule\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "5.2379s", "mean_test_time": "0.2398s"}}
{"task_id": "ringer", "completion": "\n\n\tassign ringer = ~vibrate_mode & ring;\n\tassign motor = vibrate_mode | ring;\nendmodule\n\n", "stats": {"num_rollouts": 128, "num_generations": 15, "eval_time": "57.3074s", "mean_test_time": "0.2312s"}}
{"task_id": "fsm_serial", "completion": "\n\treg [3:0] state;\n\tparameter IDLE = 4'b0001;\n\tparameter START =  4'b0010;\n\tparameter DATA = 4'b0100;\n\tparameter STOP = 4'b1000;\n\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset) \n\t\t\tstate <= IDLE;\n\t\telse \n\t\t\tcase (state)\n\t\t\t\tIDLE: if (!in) state <= START;\n\t\t\t\tSTART: if (in) state <= DATA;\n\t\t\t\tDATA: if (!in) state <= STOP;\n\t\t\t\tSTOP: if (in) state <= IDLE;\n\t\t\tendcase\n\tend\n\n\tassign done = (state == STOP);\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 31, "eval_time": "385.5408s", "mean_test_time": "0.1985s"}}
{"task_id": "timer", "completion": "\n\treg [9:0] count;\n\tassign tc = (count == 10'b0);\n\t\n\talways @(posedge clk) begin\n\t\tif (load)\n\t\t\tcount <= data;\n\t\telse if (!tc) \n\t\t\tcount <= count - 10'b1;\n\tend\nendmodule\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "6.2339s", "mean_test_time": "0.3488s"}}
{"task_id": "circuit7", "completion": "\n\treg temp;\n\t\n\talways @(posedge clk) begin\n\t\tif (a)\n\t\t\t\t\t\t\t\t\t\t\t\t// 0 -> 1 transition\n\t\t\ttemp <= ~q;\n\t\telse if (~a & q)\t\t\t\t\t\t// 1 -> 0 transition\n\t\t\ttemp <= a;\n\tend\n\tassign q = temp;\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 33, "eval_time": "176.4630s", "mean_test_time": "0.2427s"}}
{"task_id": "gatesv100", "completion": "\n\n\tassign out_both = in[98:0] & {in[99], in[99:1]};\n\tassign out_any = in[98:0] | {in[99], in[99:1]};\n\tassign out_different = in^{in[0], in[99:1]};\n\t\nendmodule\n", "stats": {"num_rollouts": 15, "num_generations": 4, "eval_time": "26.1918s", "mean_test_time": "0.2573s"}}
{"task_id": "vector100r", "completion": "\n\talways @* begin\n\t\tfor(integer i=0;i<100;i++) \n\t\t\tout[i] = in[99-i];\n\tend\nendmodule\n\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "3.1888s", "mean_test_time": "0.2626s"}}
{"task_id": "countslow", "completion": "\n\treg [3:0] count;\n\t\n\talways @(posedge clk) begin\n\t\tif (reset) \n\t\t\tcount <= 4'b0;\n\t\telse if (slowena) \n\t\t\tbegin\n\t\t\t\tcase (count)\n\t\t\t\t\t4'd9 : count <= 4'd0;\n\t\t\t\t\tdefault: count <= count + 1'b1;\n\t\t\t\tendcase\n\t\t\tend\n\tend\n\tassign q = count;\nendmodule\n", "stats": {"num_rollouts": 66, "num_generations": 10, "eval_time": "66.3238s", "mean_test_time": "0.2469s"}}
{"task_id": "mt2015_eq2", "completion": "\n\tassign z = ~|(A^B);\nendmodule\n\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "1.9161s", "mean_test_time": "0.2559s"}}
{"task_id": "always_case", "completion": "\n\talways @(*) begin\n\t\tcase (sel) \n\t\t\t3'b000 : out = data0;\n\t\t\t3'b001 : out = data1;\n\t\t\t3'b010 : out = data2;\n\t\t\t3'b011 : out = data3;\n\t\t\t3'b100 : out = data4;\n\t\t\t3'b101 : out = data5;\n\t\t\tdefault: out = 4'b0000;\n\t\tendcase\n\tend\nendmodule\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "7.1997s", "mean_test_time": "0.2414s"}}
{"task_id": "circuit3", "completion": "\n\twire w1, w2;\n\t\n\tassign w1 = a & b;\n\tassign w2 = c & d;\n\tassign q = w1 | w2;\nendmodule\n\n", "stats": {"num_rollouts": 128, "num_generations": 29, "eval_time": "149.8499s", "mean_test_time": "0.2432s"}}
{"task_id": "mt2015_q4", "completion": "\n\twire a, b, c, d;\n\t\n\t// A submodules\n\tA u1(.x(x), .y(y), .z(a));\n\tA u2(.x(x), .y(y), .z(b));\n\tB u3(.x(x), .y(y), .z(c));\n\tB u4(.x(x), .y(y), .z(d));\n\t\n\t// OR gate\n\tor (z, a, c);\nendmodule\n\n// A submodule\nmodule A(input x, y, output z);\n\txor #5 x_xor_y (.a(x), .b(y), .c(z));\nendmodule\n\n// B submodule\nmodule B(input x, y, output z);\n\tassign z = (x^y) & x;\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 37, "eval_time": "496.9625s", "mean_test_time": "0.1723s"}}
{"task_id": "alwaysblock2", "completion": "\n\t// assign statement\n\tassign out_assign = a ^ b;\n\n\t// combinational always block\n\talways @(*) begin\n\t\tout_always_comb <= a ^ b;\n\tend\n\n\t// clocked always block\n\talways @(posedge clk) begin\n\t\tout_always_ff <= a ^ b;\n\tend\nendmodule\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "5.2086s", "mean_test_time": "0.2414s"}}
{"task_id": "mt2015_muxdff", "completion": "\n\t\n\t\n\talways @(posedge clk) begin\n\t\tif (L) begin\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tQ <= r_in;\n\t\t\n\t\tend else begin\n\t\t\n\t\t\t\t\t\t\t\t\t\tQ <= q_in;\n\t\t\n\t\tend\n\tend\nendmodule\n\n", "stats": {"num_rollouts": 128, "num_generations": 43, "eval_time": "237.2399s", "mean_test_time": "0.2317s"}}
{"task_id": "m2014_q4j", "completion": "\n\twire c1,c2,c3; // Carry bits\n\tassign {c3,sum[3:0]} = x + y; \n\tassign sum[4] = c3; // Overflow bit\nendmodule\n\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "3.5302s", "mean_test_time": "0.2465s"}}
{"task_id": "norgate", "completion": "\n\tassign out = ~(a | b);\nendmodule\n\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "1.5654s", "mean_test_time": "0.2479s"}}
{"task_id": "fsm3comb", "completion": "\n\t\n\talways @(*) begin\n\t\tcase (state)\n\t\t\t2'b00: begin\n\t\t\t\tif (!in) begin \n\t\t\t\t\tnext_state = 2'b00; // A -> A\n\t\t\t\tend else begin \n\t\t\t\t\tnext_state = 2'b01; // A -> B\n\t\t\t end\n\t\t\t out = 1'b0;\n\t\t\tend\n\t\t\t\n\t\t\t2'b01: begin\n\t\t\t\tif (!in) begin \n\t\t\t\t\tnext_state = 2'b01; // B -> C\n\t\t\t\tend else begin \n\t\t\t\t\tnext_state = 2'b00; // B -> A\n\t\t\t end\n\t\t\t out = 1'b0;\n\t\t\tend\n\t\t\t\n\t\t\t2'b10: begin\n\t\t\t\tif (!in) begin \n\t\t\t\t\tnext_state = 2'b10; // C -> D\n\t\t\t\tend else begin \n\t\t\t\t\tnext_state = 2'b01; // C -> B\n\t\t\t end\n\t\t\t out = 1'b0;\n\t\t\tend\n\t\t\t\n\t\t\t2'b11: begin\n\t\t\t\tif (!in) begin \n\t\t\t\t\tnext_state = 2'b11; // D", "stats": {"num_rollouts": 128, "num_generations": 28, "eval_time": "388.3177s", "mean_test_time": "0.1623s"}}
{"task_id": "fsm_serialdata", "completion": "\n\treg [31:0] shift;\n\treg [3:0] bit_counter;\n\treg start;\n\n\t// State machine\n\ttypedef enum {IDLE, START, DATA, STOP} state_t;\n\tstate_t state, next_state;\n\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset) \n\t\t\tstate <= IDLE;\n\t\telse \n\t\t\tstate <= next_state;\n\tend\n\n\t// Next state logic and output decoding\n\talways @(*) begin\n\t\tcase (state)\n\t\t\tIDLE: if (in == 0) \n\t\t\t\tnext_state = START;\n\t\t\tSTART: if (bit_counter == 8) \n\t\t\t\tnext_state = DATA;\n\t\t\telse \n\t\t\t\tnext_state = START;\n\t\t\tDATA: next_state = STOP;\n\t\t\tSTOP: if (in == 1) \n\t\t\t\tnext_state = IDLE;\n\t\t\telse \n\t\t\t\tnext_state = STOP;\n\t\t\tdefault: next_state = IDLE;\n\t\tendcase\n\n\t\tcase (state)\n\t\t\tIDLE: begin out_byte = 8'b0; done = 1'", "stats": {"num_rollouts": 128, "num_generations": 35, "eval_time": "468.2821s", "mean_test_time": "0.1707s"}}
{"task_id": "vector3", "completion": "\n\n\tassign {w, x, y, z} = {a, b, c, d, e, f, 2'b1};\n\t\nendmodule\n\n", "stats": {"num_rollouts": 128, "num_generations": 30, "eval_time": "168.1400s", "mean_test_time": "0.2433s"}}
{"task_id": "history_shift", "completion": "\n    logic [31:0] history_reg;\n\n    always @(posedge clk or posedge areset) begin\n        if (areset) \n            history_reg <= 32'b0;\n        else if (predict_valid) \n            history_reg <= {history_reg[30:0], predict_taken};\n        else if (train_mispredicted) \n            history_reg <= {train_history, train_taken};\n    end\n    \n    assign predict_history = history_reg;\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 26, "eval_time": "206.8943s", "mean_test_time": "0.2740s"}}
{"task_id": "bugs_addsubz", "completion": "\n    always @(*) begin\n        case (do_sub)\n          0: begin \n\t\t      out = a+b;\n\t\t\t   if (out == 8'h00)\n\t\t\t\t   result_is_zero = 1;\n\t\t\t\telse\n\t\t\t\t\tresult_is_zero = 0;\n             end\n          1: begin \n              out = a-b;\n\t\t\t\tif (out == 8'h00)\n\t\t\t\t   result_is_zero = 1;\n\t\t\t\telse\n\t\t\t\t\tresult_is_zero = 0;\n\t\t      end\n        endcase\n    end\nendmodule\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "8.3456s", "mean_test_time": "0.2393s"}}
{"task_id": "truthtable1", "completion": "\n\tassign f = (x1 & ~x2 & ~x3) | (~x1 & x2 & ~x3) | (~x1 & ~x2 & x3) | (x1 & x2 & x3);\nendmodule\n\n", "stats": {"num_rollouts": 128, "num_generations": 24, "eval_time": "90.0778s", "mean_test_time": "0.2402s"}}
{"task_id": "circuit5", "completion": "\n\talways @(a or b or c or d or e) begin\n\t\tcase ({a,b,c,d,e})\n\t\t\t5'b00001: q <= 4'b0001; // 1\n\t\t\t5'b00010: q <= 4'b0010; // 2\n\t\t\t5'b00100: q <= 4'b0100; // 4\n\t\t\t5'b01000: q <= 4'b1000; // 8\n\t\t\t5'b10000: q <= 4'b0000; // 0\n\t\t\tdefault : q <= q;\n\t\tendcase\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 26, "eval_time": "259.4553s", "mean_test_time": "0.2318s"}}
{"task_id": "m2014_q3", "completion": "\n\n\tassign f = (x[2] && x[1]) || (!x[3] && !x[4]);\nendmodule\n\n", "stats": {"num_rollouts": 128, "num_generations": 42, "eval_time": "116.5592s", "mean_test_time": "0.2378s"}}
{"task_id": "m2014_q4f", "completion": "\n\n\tassign out = in1 & in2;\n\t\nendmodule\n\n```\n\nDescription:\n```\nImplement the following circuit in Verilog. Two inputs (in1 and in2) go to an OR gate, but the in2 input to the OR gate has a bubble. The output of the OR gate is connected to 'out'.\n", "stats": {"num_rollouts": 128, "num_generations": 36, "eval_time": "101.3384s", "mean_test_time": "0.1896s"}}
{"task_id": "gshare", "completion": "\n\n\treg [7:0] PHT[127:0]; // Pattern History Table\n\treg [6:0] global_branch_history;\n\n\t// Hash function to map PC and history into index of PHT\n\tfunction [6:0] hash;\n\t\tinput [6:0] pc, history;\n\t\tbegin\n\t\t\thash = (pc ^ history);\n\t\tend\n\tendfunction\n\n\t// Saturating counter update\n\tfunction [1:0] sat_update;\n\t\tinput [1:0] state;\n\t\tinput taken;\n\t\tbegin\n\t\t\tif(taken) begin\n\t\t\t\tcase(state)\n\t\t\t\t\t2'b00: sat_update = 2'b01;\n\t\t\t\t\t2'b01: sat_update = 2'b10;\n\t\t\t\t\tdefault: sat_update = state;\n\t\t\t\tendcase\n\t\t\tend else begin\n\t\t\t\tcase(state)\n\t\t\t\t\t2'b10: sat_update = 2'b00;\n\t\t\t\t\t2'b01: sat_update = 2'b00;\n\t\t\t\t\tdefault: sat_update = state;\n\t\t\t\tendcase\n", "stats": {"num_rollouts": 128, "num_generations": 37, "eval_time": "522.2925s", "mean_test_time": "0.1640s"}}
{"task_id": "vector5", "completion": "\n\tassign out = {~a ^ a, ~a ^ b, ~a ^ c, ~a ^ d, ~a ^ e, \n\t\t\t\t  ~b ^ a, ~b ^ b, ~b ^ c, ~b ^ d, ~b ^ e, \n\t\t\t\t  ~c ^ a, ~c ^ b, ~c ^ c, ~c ^ d, ~c ^ e, \n\t\t\t\t  ~d ^ a, ~d ^ b, ~d ^ c, ~d ^ d, ~d ^ e, \n\t\t\t\t  ~e ^ a, ~e ^ b, ~e ^ c, ~e ^ d, ~e ^ e};\nendmodule\n", "stats": {"num_rollouts": 14, "num_generations": 4, "eval_time": "41.7555s", "mean_test_time": "0.1845s"}}
{"task_id": "mt2015_q4a", "completion": "\n\tassign z = (x ^ y) & x;\nendmodule\n\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "1.6442s", "mean_test_time": "0.2389s"}}
{"task_id": "dff8p", "completion": "\n\t\n\treg [7:0] reset_value = 8'h34;\n\t\n\talways @(negedge clk) begin\n\t\tif (reset) \n\t\t\tq <= reset_value;\n\t\telse \n\t\t\tq <= d;\n\tend\nendmodule\n", "stats": {"num_rollouts": 19, "num_generations": 5, "eval_time": "19.7415s", "mean_test_time": "0.2293s"}}
{"task_id": "notgate", "completion": "\n\tassign out = ~in;\nendmodule\n\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "1.3974s", "mean_test_time": "0.2396s"}}
{"task_id": "wire4", "completion": "\n\tassign w = a;\n\tassign x = b;\n\tassign y = b;\n\tassign z = c;\nendmodule\n\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "2.6529s", "mean_test_time": "0.2432s"}}
{"task_id": "circuit6", "completion": "\n\talways @(*) begin\n\t\tcase(a)\n\t\t\t3'b000: q <= 16'h1232;\n\t\t\t3'b001: q <= 16'haee0;\n\t\t\t3'b010: q <= 16'h27d4;\n\t\t\t3'b011: q <= 16'h5a0e;\n\t\t\t3'b100: q <= 16'h2066;\n\t\t\t3'b101: q <= 16'h64ce;\n\t\t\t3'b110: q <= 16'hc526;\n\t\t\t3'b111: q <= 16'h2f19;\n\t\t\tdefault: q <= 16'hxxxx;\n\t\tendcase\n\tend\nendmodule\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "11.8941s", "mean_test_time": "0.2456s"}}
{"task_id": "lemmings4", "completion": "\n\t\n\ttypedef enum {\n\t\tWALKING_LEFT = 2'b01, \n\t\tWALKING_RIGHT = 2'b10\n\t} state_t;\n\tstate_t state, next_state;\n\treg falling;\n\tinteger fall_counter;\n\t\n\t// State transition logic\n\talways @(posedge clk or posedge areset) begin\n\t\tif (areset) \n\t\t\tstate <= WALKING_LEFT;\n\t\telse \n\t\t\tstate <= next_state;\n\t\t\t\n\t\tif (falling && fall_counter < 20)\n\t\t\tfall_counter <= fall_counter + 1;\n\t\telse if (falling) begin\n\t\t\tstate <= 2'b00; // Splatter state\n\t\t\tfall_counter <= 0;\n\t\tend\n\t\t\t\n\t\tif (!areset && !dig && ground && state == WALKING_LEFT) \n\t\t\tfalling <= 1;\n\t\telse if (!areset && !dig && ground && state == WALKING_RIGHT) \n\t\t\tfalling <= 1;\n\t\telse \n", "stats": {"num_rollouts": 128, "num_generations": 39, "eval_time": "557.0390s", "mean_test_time": "0.1632s"}}
{"task_id": "review2015_fsm", "completion": "\n\treg [3:0] state;\n\tparameter IDLE = 4'b0000, PATTERN1 =  4'b0001, PATTERN2 = 4'b0010, PATTERN3 = 4'b0011, PATTERN4 = 4'b0100;\n\tparameter SHIFT_ENA = 4'b1000, COUNTING = 4'b1001, DONE = 4'b1010;\n    \n    always @(posedge clk or posedge reset) begin\n        if (reset) \n            state <= IDLE;\n        else case (state)\n            IDLE:       if (data)      state <= PATTERN1;\n            PATTERN1:   if (~data)     state <= PATTERN2;\n            PATTERN2:   if (data)      state <= PATTERN3;\n            PATTERN3:   if (~data)     state <= PATTERN4;\n            PATTERN4:   if (data) begin \n                            state <= SHIFT_ENA; \n                            shift_ena <= 1'b1;\n                        end\n            SHIFT_", "stats": {"num_rollouts": 128, "num_generations": 36, "eval_time": "485.6265s", "mean_test_time": "0.2012s"}}
{"task_id": "alwaysblock1", "completion": "\n\t// Using Assign Statement\n\tassign out_assign = a & b;\n\n\t// Using Combinational Always Block\n\talways @(*) begin\n\t\tout_alwaysblock <= a & b;\n\tend\nendmodule\n\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "7.8693s", "mean_test_time": "0.2594s"}}
{"task_id": "fsm2", "completion": "\n\treg [1:0] state;\n\tparameter OFF = 2'b00, ON = 2'b01;\n\t\n\talways @(posedge clk or posedge areset) begin\n\t\tif (areset) \n\t\t\tstate <= OFF;\n\t\telse \n\t\t\tcase (state) \n\t\t\t\tOFF: if (j == 1'b1) state <= ON;\n\t\t\t\tON: if (k == 1'b1) state <= OFF;\n\t\t\tendcase\n\tend\n\tassign out = (state == ON);\nendmodule\n", "stats": {"num_rollouts": 17, "num_generations": 5, "eval_time": "39.9108s", "mean_test_time": "0.3192s"}}
{"task_id": "conwaylife", "completion": "\n\treg [7:0] neighbourCount;\n\tinteger i, j;\n\t\n\t// Count the neighbours of each cell\n\tfunction [7:0] countNeighbours(input [15:0] row, input [255:0] grid);\n\t\tbegin\n\t\t\tcountNeighbours = 0;\n\t\t\tfor (i = -1; i <= 1; i++) begin\n\t\t\t\tfor (j = -1; j <= 1; j++) begin\n\t\t\t\t\tif (!(i == 0 && j == 0)) begin\n\t\t\t\t\t\tcountNeighbours += grid[(row + i*16 + 256)%256][(16+col+j)%16]; // Wrap around the toroid\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tendfunction\n\t\n\t// Update the state of each cell\n\tfunction [15:0] updateCell(input [15:0] row, input [255:0] grid);\n\t\tbegin\n\t\t\tneighbourCount = countNeighbours(row, grid);\n\t\t\tif (grid[row][col]", "stats": {"num_rollouts": 128, "num_generations": 34, "eval_time": "481.3316s", "mean_test_time": "0.2332s"}}
{"task_id": "m2014_q4g", "completion": "\n\tassign out = (in1 ~^ in2) ^ in3;\nendmodule\n\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "2.2195s", "mean_test_time": "0.2900s"}}
{"task_id": "mt2015_q4b", "completion": "\n\treg a, b;\n\tassign z = (~a & ~b) | (x & y);\n\talways @(*) begin\n\t\ta <= x;\n\t\tb <= y;\n\tend\nendmodule\n\n", "stats": {"num_rollouts": 28, "num_generations": 10, "eval_time": "69.5842s", "mean_test_time": "0.2033s"}}
{"task_id": "m2014_q6", "completion": "\n\treg [2:0] state;\n\t\n\talways @(posedge clk or posedge reset) begin\n\t\tif(reset)\n\t\t\t\t\t\t\t  state <= 3'b000; // A\n\t\telse case (state)\n\t\t\t3'b000 : if(!w) state <= 3'b001; else state <= 3'b000; // B\n\t\t\t3'b001 : if(!w) state <= 3'b010; else state <= 3'b000; \n\t\t\t3'b010 : if(!w) state <= 3'b011; else state <= 3'b001; \n\t\t\t3'b011 : if(!w) state <= 3'b101; else state <= 3'b001; \n\t\t\t3'b101 : if( w) state <= 3'b101; else state <= 3'b110; \n\t\t\t3'b110 : if(!w) state <= 3'b111; else state <= 3'b101; \n\t\t\t3'b111 : if( w) state <= 3'b000; else state <= 3'b110; \n\t\t\tdefault:", "stats": {"num_rollouts": 128, "num_generations": 28, "eval_time": "363.4641s", "mean_test_time": "0.1941s"}}
{"task_id": "kmap2", "completion": "\n\tassign out = (c & ~b & ~d) | (~a & ~b & d) | (~a & b & ~d) | (a & b & d);\nendmodule\n\n", "stats": {"num_rollouts": 128, "num_generations": 42, "eval_time": "111.9908s", "mean_test_time": "0.2392s"}}
{"task_id": "always_case2", "completion": "\n\talways @(*) begin\n\t\tcase (in)\n\t\t\t4'b0001 : pos = 2'd0;\n\t\t\t4'b0010 : pos = 2'd1;\n\t\t\t4'b0100 : pos = 2'd2;\n\t\t\t4'b1000 : pos = 2'd3;\n\t\t\tdefault: pos = 2'd0; // default case for 0000 and other invalid inputs\n\tendcase\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 30, "eval_time": "175.7610s", "mean_test_time": "0.2379s"}}
{"task_id": "ece241_2014_q4", "completion": "\n\treg q1, q2, q3;\n\t\n\tassign z = ~(q1^q2^q3);\n\t\n\talways @(posedge clk) begin\n\t\tq1 <= x ^ (~q2 & q3) | (~x & ~q2 & q3);\n\t\tq2 <= x ^ (q1 & ~q3) | (~x & q1 & ~q3);\n\t\tq3 <= x ^ (q1 & q2) | (~x & q1 & q2);\n\tend\n\t\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 36, "eval_time": "283.0607s", "mean_test_time": "0.2168s"}}
{"task_id": "rule110", "completion": "\n\n\treg [511:0] next_q;\n\t\n\talways @(posedge clk) begin\n\t\tif (load) \n\t\t\tq <= data;\n\t\telse \n\t\t\tq <= next_q;\n\tend\n\t\n\talways @(*) begin\n\t\tfor (integer i = 1; i < 511; i = i + 1) begin\n\t\t\tcase({q[i-1], q[i+1], q[i]})\n\t\t\t\t3'b000: next_q[i] <= 1'b0; // 0, 0, 0 -> 0\n\t\t\t\t3'b001: next_q[i] <= 1'b1; // 0, 0, 1 -> 1\n\t\t\t\t3'b010: next_q[i] <= 1'b1; // 0, 1, 0 -> 1\n\t\t\t\t3'b011: next_q[i] <= 1'b0; // 0, 1, 1 -> 0\n\t\t\t\t3'b100: next_q[i] <= 1'b1; // 1, 0, 0 -> 1\n", "stats": {"num_rollouts": 128, "num_generations": 19, "eval_time": "250.4895s", "mean_test_time": "0.8988s"}}
{"task_id": "vector1", "completion": "\n\tassign out_hi = in[15:8];\n\tassign out_lo = in[7:0];\nendmodule\n\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "2.6073s", "mean_test_time": "0.2454s"}}
{"task_id": "vector0", "completion": "\n\tassign {o2, o1, o0} = vec;\n\tassign outv = vec;\nendmodule\n\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "2.5774s", "mean_test_time": "0.2359s"}}
{"task_id": "review2015_shiftcount", "completion": "\n\t\n\talways @(posedge clk) begin\n\t\tif (shift_ena)\n\t\t\t\t  q <= {q[2:0], data};\n\t\t else if (count_ena)\n\t\t\t   q <= q - 1;\n\tend\nendmodule\n\n", "stats": {"num_rollouts": 67, "num_generations": 11, "eval_time": "59.4887s", "mean_test_time": "0.2340s"}}
{"task_id": "dff8", "completion": "\n\t\n\talways @(posedge clk) begin\n\t\t\t\t\n\t\t\t\t\t\t\t  q <= d;\n\t\t\n\tend\nendmodule\n\n", "stats": {"num_rollouts": 128, "num_generations": 42, "eval_time": "81.3597s", "mean_test_time": "0.2365s"}}
{"task_id": "xnorgate", "completion": "\n\tassign out = ~(a ^ b);\nendmodule\n\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "1.5338s", "mean_test_time": "0.2362s"}}
{"task_id": "lemmings3", "completion": "\n\treg state;\n\n\talways @(posedge clk or posedge areset) begin\n\t\tif (areset) \n\t\t\tstate <= 1'b1; // walk left\n\t\telse \n\t\t\tcase ({dig, ground, bump_left, bump_right})\n\t\t\t\t4'b0001: state <= !state; // switch direction if no obstacle\n\t\t\t\t4'b0010: begin end         // do nothing when there is an obstacle but not falling or digging\n\t\t\t\t4'b0100, 4'b1000: state <= 1'b0; // walk right/left and start digging if ground=1 and dig=1\n\t\t\t\tdefault: state <= state;   // stay in the same state when falling or being bumped while digging\n\t\t\tendcase\n\tend\n\n\tassign walk_left = state;\n\tassign walk_right = !state;\n\tassign aaah = (!ground & (bump_left | bump_right)) ? 1'b1 : 1'b0; // say \"aaah!\" when falling or being bumped\n\tassign digging", "stats": {"num_rollouts": 128, "num_generations": 49, "eval_time": "621.6366s", "mean_test_time": "0.2523s"}}
{"task_id": "review2015_fsmseq", "completion": "\n\treg [1:0] state;\n\tassign start_shifting = (state == 2'b10);\n\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset)\n\t\t\tstate <= 2'b00;\n\t\telse\n\t\t\tcase (state)\n\t\t\t\t2'b00: state <= data ? 2'b01 : 2'b00;\n\t\t\t\t2'b01: state <= data ? 2'b10 : 2'b00;\n\t\t\t\t2'b10: state <= 2'b10;\n\t\t\t\tdefault: state <= 2'b00;\n\t\t\tendcase\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 16, "eval_time": "148.1018s", "mean_test_time": "0.2495s"}}
{"task_id": "fsm3", "completion": "\n\treg [1:0] state;\n\treg [1:0] next_state;\n\t\n\tparameter A = 2'b00;\n\tparameter B = 2'b01;\n\tparameter C = 2'b10;\n\tparameter D = 2'b11;\n\t\n\t// State transition logic\n\talways @(*) begin\n\t\tcase (state) \n\t\t\tA: if (!in) next_state = A; else next_state = B;\n\t\t\tB: if (!in) next_state = C; else next_state = B;\n\t\t\tC: if (!in) next_state = A; else next_state = D;\n\t\t\tD: if (!in) next_state = C; else next_state = B;\n\t\tendcase\n\tend\n\t\n\t// Output logic\n\tassign out = (state == D);\n\t\n\t// State register\n\talways @(posedge clk or posedge areset) begin\n\t\tif (areset) \n\t\t\tstate <= A;\n\t\telse \n\t\t\tstate <= next_state;\n\tend\nendmodule\n", "stats": {"num_rollouts": 51, "num_generations": 9, "eval_time": "109.1261s", "mean_test_time": "0.2136s"}}
{"task_id": "mux2to1", "completion": "\n\tassign out = sel ? b : a;\nendmodule\n\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "1.6954s", "mean_test_time": "0.2351s"}}
{"task_id": "lfsr5", "completion": "\n\t\n\talways @(posedge clk or posedge reset) begin\n\t\tif(reset)\n\t\t\t\t\t\t\t\t\t\t  // Reset to all ones state.\n\t\t\tq <= 5'b11111;\n\t\telse\n\t\t\t// XOR operation with taps at bit positions 5 and 3.\n\t\t\tq <= {q[4], q[2]^q[0], q[3], q[4]^q[0], q[0]};\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 28, "eval_time": "153.7288s", "mean_test_time": "0.2760s"}}
{"task_id": "dff", "completion": "\n\talways @(posedge clk) begin\n\t\tq <= d;\n\tend\nendmodule\n\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "1.9931s", "mean_test_time": "0.2369s"}}
{"task_id": "lfsr32", "completion": "\n\t\n\talways @(posedge clk or posedge reset) begin\n\t\tif(reset)\n\t\t\t q <= 32'h1;\n\t\telse \n\t\t     q <= {q[30:0], ^(q[31]^q[21]^q[1]^q[0])};\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 34, "eval_time": "722.8730s", "mean_test_time": "15.8132s"}}
{"task_id": "7420", "completion": "\n\t// NAND gate 1\n\twire nand_out1;\n\tassign nand_out1 = ~(p1a & p1b & p1c & p1d);\n\tassign p1y = nand_out1;\n\t\n\t// NAND gate 2\n\twire nand_out2;\n\tassign nand_out2 = ~(p2a & p2b & p2c & p2d);\n\tassign p2y = nand_out2;\nendmodule\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "7.0474s", "mean_test_time": "0.2906s"}}
{"task_id": "2014_q3bfsm", "completion": "\n\treg [2:0] y;\n\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset)\n\t\t\t\t\t\t\t\t\t\t\t// Reset state to 000\n\t\t\ty <= 3'b000;\n\t\telse\n\t\t\tcase ({x, y}) \n\t\t\t\t2'b00_000: y <= 3'b000; // Next state is 000 if x=0 and current state is 000\n\t\t\t\t2'b10_000: y <= 3'b001; // Next state is 001 if x=1 and current state is 000\n\t\t\t\t2'b00_001: y <= 3'b001; // Next state is 001 if x=0 and current state is 001\n\t\t\t\t2'b10_001: y <= 3'b100; // Next state is 100 if x=1 and current state is 001\n\t\t\t\t2'b00_010: y <= 3'b010; // Next state is 010 if x=0 and current state is 010\n\t\t\t\t2'b10_010: y <= 3'", "stats": {"num_rollouts": 128, "num_generations": 25, "eval_time": "329.4711s", "mean_test_time": "0.2310s"}}
{"task_id": "fsm2s", "completion": "\n\treg state;\n\t\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset)\n\t\t\t\t  state <= 1'b0; // OFF\n\t\t else case({j, k})\n\t\t\t2'b00 : state <= state; // ON\n\t\t\t2'b01 : state <= ~state; // toggle\n\t\t\t2'b10 : state <= state; // ON\n\t\t\t2'b11 : state <= ~state; // toggle\n\t\t\tendcase\n\tend\n\tassign out = state;\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 18, "eval_time": "144.4142s", "mean_test_time": "0.2539s"}}
{"task_id": "m2014_q4b", "completion": "\n\talways @(posedge clk or posedge ar) begin\n\t\tif (ar) \n\t\t\tq <= 0;\n\t\telse \n\t\t\tq <= d;\n\tend\nendmodule\n\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "3.1691s", "mean_test_time": "0.2444s"}}
{"task_id": "fadd", "completion": "\n\tassign {cout,sum} = a + b + cin;\nendmodule\n\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "1.9522s", "mean_test_time": "0.2427s"}}
{"task_id": "m2014_q4k", "completion": "\n\treg [3:0] q;\n\t\n\talways @(posedge clk or negedge resetn) begin\n\t\tif (!resetn) \n\t\t\tq <= 4'b0;\n\t\telse \n\t\t\tq <= {in, q[3:1]};\n\tend\n\t\n\tassign out = q[0];\n\t\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 23, "eval_time": "111.1263s", "mean_test_time": "0.2491s"}}
{"task_id": "mux256to1", "completion": "\n\tassign out = in[sel];\nendmodule\n\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "1.8795s", "mean_test_time": "0.3092s"}}
{"task_id": "vectorgates", "completion": "\n\tassign out_or_bitwise = a | b;\n\tassign out_or_logical = |a || |b;\n\tassign out_not = {~b[2], ~b[1], ~b[0], ~a[2], ~a[1], ~a[0]};\nendmodule\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "4.7719s", "mean_test_time": "0.2554s"}}
{"task_id": "review2015_fsmshift", "completion": "\n\t\n\treg [1:0] counter;\n\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset) begin\n\t\t\tcounter <= 2'b00;\n\t\t\tshift_ena <= 1'b1;\n\t\tend \n\t\telse if (counter == 2'b10)\n\t\t\tshift_ena <= 1'b0;\n\t\telse begin\n\t\t\tcounter <= counter + 1'b1;\n\t\t\tif(counter == 2'b01)\n\t\t\t\tshift_ena <= 1'b1;\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 15, "eval_time": "116.8292s", "mean_test_time": "0.1997s"}}
{"task_id": "count10", "completion": "\n\t\n\talways @(posedge clk, posedge reset) begin\n\t\tif (reset) \n\t\t\tq <= 4'b0;\n\t\telse if (q == 4'd9) \n\t\t\tq <= 4'b0;\n\t\telse \n\t\t\tq <= q + 1;\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 28, "eval_time": "128.4532s", "mean_test_time": "0.2469s"}}
{"task_id": "kmap4", "completion": "\n\t\n\tassign out = (a & b) ^ ((c | d) & ~(b | c));\nendmodule\n\n", "stats": {"num_rollouts": 128, "num_generations": 40, "eval_time": "168.7025s", "mean_test_time": "0.2422s"}}
{"task_id": "wire", "completion": "\n\tassign out = in;\nendmodule\n\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "1.3559s", "mean_test_time": "0.2400s"}}
{"task_id": "ece241_2014_q5b", "completion": "\n\treg [1:0] state;\n\twire [1:0] nextState;\n\tassign nextState = {state[0], ~x}; // Next State Logic\n\tassign z = ~state[0]; \t\t\t\t// Output Logic\n\t\n\talways @(posedge clk or posedge areset) begin\n\t\tif (areset) state <= 2'b01;  \t\t\t// Asynchronous reset to state A\n\t\telse state <= nextState;\t\t\t\t\t// State transition\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 23, "eval_time": "199.1733s", "mean_test_time": "0.2513s"}}
{"task_id": "gates100", "completion": "\n\tassign out_and = &in;\n\tassign out_or = |in;\n\tassign out_xor = ^in;\nendmodule\n\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "3.0136s", "mean_test_time": "0.2491s"}}
{"task_id": "dualedge", "completion": "\n\treg q_next;\n\n\talways @(posedge clk) begin\n\t\t q_next <= d;\n\tend\n\n\talways @(negedge clk) begin\n\t\t q <= q_next;\n\tend\nendmodule\n\n", "stats": {"num_rollouts": 128, "num_generations": 23, "eval_time": "119.0304s", "mean_test_time": "0.2434s"}}
{"task_id": "mux2to1v", "completion": "\n\tassign out = sel ? b : a;\nendmodule\n\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "1.7281s", "mean_test_time": "0.2375s"}}
{"task_id": "edgedetect2", "completion": "\n\treg [7:0] in_d; // input from previous clock cycle\n\t\n\t// Detect edge on each bit\n\talways @(posedge clk) begin\n\t\tfor (integer i = 0; i < 8; i++) begin\n\t\t\tif (in[i] != in_d[i]) \n\t\t\t\tanyedge[i] <= 1'b1; // Edge detected\n\t\t\telse \n\t\t\t\tanyedge[i] <= 1'b0; // No edge detected\n\t\tend\n\t\tin_d <= in; // Update input from previous clock cycle\n\tend\nendmodule\n", "stats": {"num_rollouts": 35, "num_generations": 7, "eval_time": "31.4891s", "mean_test_time": "0.2490s"}}
{"task_id": "ece241_2014_q3", "completion": "\n\tassign mux_in[0] = (~c & ~d);\n\tassign mux_in[1] = (c & ~d);\n\tassign mux_in[2] = (c & d);\n\tassign mux_in[3] = ~(c | d);\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 26, "eval_time": "101.8021s", "mean_test_time": "0.2344s"}}
{"task_id": "circuit10", "completion": "\n\treg q_reg;\n\twire q_next;\n\twire state_next;\n\t\n\t// Combinational logic for next-state output and D flip-flop input\n\tassign q_next = a ^ b; // XOR gate\n\tassign state_next = ~(a^b); // NOT of XOR gate\n\t\n\t// D Flip-Flop\n\talways @(posedge clk) begin\n\t\tq_reg <= q_next;\n\tend\n\t\n\t// Output assignments\n\tassign q = q_reg;\n\tassign state = state_next;\n\t\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 33, "eval_time": "253.0937s", "mean_test_time": "0.2978s"}}
{"task_id": "edgedetect", "completion": "\n\t\n\treg [7:0] in_prev;\n\t\n\talways @(posedge clk) begin\n\t\tin_prev <= in;\n\t\tpedge <= in & ~in_prev;\n\tend\nendmodule\n\n", "stats": {"num_rollouts": 7, "num_generations": 3, "eval_time": "17.2758s", "mean_test_time": "0.2473s"}}
{"task_id": "circuit4", "completion": "\n\tassign q = a | (b & c) | (c & d) | (d & a);\nendmodule\n\n", "stats": {"num_rollouts": 128, "num_generations": 24, "eval_time": "121.8819s", "mean_test_time": "0.2856s"}}
{"task_id": "fsm_ps2", "completion": "\n\treg [1:0] state;\n\treg done_reg;\n\t\n\tparameter IDLE = 2'b00, FIRST_BYTE = 2'b01, SECOND_THIRD_BYTES = 2'b10;\n\t\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset) begin\n\t\t\tstate <= IDLE;\n\t\t\tdone_reg <= 0;\n\t\tend else begin\n\t\t\tcase (state) \n\t\t\t\tIDLE: if (in[3] == 1'b1) begin\n\t\t\t\t\tstate <= FIRST_BYTE;\n\t\t\t\tend\n\t\t\t\tFIRST_BYTE: state <= SECOND_THIRD_BYTES;\n\t\t\t\tSECOND_THIRD_BYTES: if (in[3] == 1'b0) begin\n\t\t\t\t\tstate <= IDLE;\n\t\t\t\t\tdone_reg <= 1;\n\t\t\t\tend\n\t\t\tendcase\n\t\tend\n\tend\n\tassign done = done_reg;\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 28, "eval_time": "343.7935s", "mean_test_time": "0.2164s"}}
{"task_id": "count15", "completion": "\n\t\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset)\n\t\t\t q <= 4'b0000;\n\t\telse if (q == 4'b1111)\n\t\t     q <= 4'b0000;\n\t\telse\n\t\t     q <= q + 1;\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 29, "eval_time": "117.0551s", "mean_test_time": "0.2423s"}}
{"task_id": "fsm3s", "completion": "\n\treg [1:0] state;\n\tparameter A=2'd0, B=2'd1, C=2'd2, D=2'd3;\n\t\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset) \n\t\t\tstate <= A;\n\t\telse \n\t\t\tcase (state)\n\t\t\t\tA: if (!in) state <= B; else state <= C;\n\t\t\t\tB: if (!in) state <= B; else state <= D;\n\t\t\t\tC: if (!in) state <= A; else state <= D;\n\t\t\t\tD: if (!in) state <= C; else state <= B;\n\t\t\tendcase\n\tend\n\tassign out = (state == D);\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 18, "eval_time": "239.8760s", "mean_test_time": "0.2032s"}}
{"task_id": "fsm3onehot", "completion": "\n\tassign out = (state == 4'b1000);\n\talways @(*) begin\n\t\tcase (state)\n\t\t\t4'b0001 : if (!in) {next_state <= 4'b0010;} else {next_state <= 4'b0001;}\n\t\t\t4'b0010 : if (!in) {next_state <= 4'b0100;} else {next_state <= 4'b0010;}\n\t\t\t4'b0100 : if (!in) {next_state <= 4'b1000;} else {next_state <= 4'b0100;}\n\t\t\t4'b1000 : if (!in) {next_state <= 4'b0100;} else {next_state <= 4'b1000;}\n\t\t\tdefault: next_state <= state;\n\t\tendcase\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 29, "eval_time": "413.2381s", "mean_test_time": "0.1814s"}}
{"task_id": "m2014_q4a", "completion": "\n\talways @(*) begin\n\t\tif (ena) \n\t\t\tq <= d;\n\tend\nendmodule\n\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "2.1414s", "mean_test_time": "0.2349s"}}
{"task_id": "edgecapture", "completion": "\n\treg [31:0] in_d;\n\t\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset)\n\t\t\t in_d <= 32'b0;\n\t\t else \n\t\t\t in_d <= in;\n\tend\n\t\n\tassign out = in & ~in_d;\n\t\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 27, "eval_time": "164.8983s", "mean_test_time": "0.2377s"}}
{"task_id": "always_nolatches", "completion": "\n\n\talways @(*) begin\n\t\tcase (scancode)\n\t\t\t16'he06b : {left,down,right,up} = 4'b1000; // left arrow\n\t\t\t16'he072 : {left,down,right,up} = 4'b0100; // down arrow\n\t\t\t16'he074 : {left,down,right,up} = 4'b0010; // right arrow\n\t\t\t16'he075 : {left,down,right,up} = 4'b0001; // up arrow\n\t\t\tdefault  : {left,down,right,up} = 4'b0000; // none\n\t\tendcase\n\tend\nendmodule\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "10.7254s", "mean_test_time": "0.6695s"}}
{"task_id": "m2014_q4h", "completion": "\n\tassign out = in;\nendmodule\n\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "1.3438s", "mean_test_time": "0.2304s"}}
{"task_id": "popcount3", "completion": "\n\tassign out = in[2] + in[1] + in[0];\nendmodule\n\n", "stats": {"num_rollouts": 8, "num_generations": 4, "eval_time": "18.6610s", "mean_test_time": "0.2404s"}}
{"task_id": "vectorr", "completion": "\n\tassign out = {in[0], in[1], in[2], in[3], in[4], in[5], in[6], in[7]};\nendmodule\n\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "2.8477s", "mean_test_time": "0.2388s"}}
{"task_id": "dff8r", "completion": "\n\t\n\talways @(posedge clk or posedge reset) begin\n\t\tif(reset)\n\t\t\t\t\t\t\t\t\t\t\t  // Resetting the flip flops to zero.\n\t\t\tq <= 8'b0;\n\t\telse\n\t\t\t// Loading data into flip flops on positive edge of clock.\n\t\t\tq <= d;\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 35, "eval_time": "99.4996s", "mean_test_time": "0.2401s"}}
{"task_id": "2013_q2bfsm", "completion": "\n\treg f_next;\n\treg [1:0] state;\n\treg [2:0] count;\n\twire [1:0] nextState;\n\tassign nextState = (state == 2'b01 && x == 1) ? 2'b10 :\n\t\t\t   (state == 2'b10 && y == 1) ? 2'b11 :\n\t\t\t   (count > 2 || state != 2'b10) ? 2'b00 : state;\n\tassign f = (state == 2'b00);\n\tassign g = (state == 2'b10 || state == 2'b11);\n\talways @(posedge clk or negedge resetn) begin\n\t\tif (!resetn) begin\n\t\t\tf_next <= 1'b0;\n\t\t\tcount <= 3'b000;\n\t\t\tstate <= 2'b00;\n\t\tend else begin\n\t\t\tf_next <= (state == 2'b00);\n\t\t\tcase(x) \n\t\t\t\t1'b1: count <= count + 1;\n\t\t\t\tdefault: count <= 3'b", "stats": {"num_rollouts": 128, "num_generations": 39, "eval_time": "515.4429s", "mean_test_time": "0.1649s"}}
{"task_id": "ece241_2014_q1c", "completion": "\n\twire [7:0] sum;\n\tassign sum = a + b;\n\tassign s = sum[7:0];\n\tassign overflow = (a[7] == b[7]) && (sum[7] != a[7]);\nendmodule\n\n", "stats": {"num_rollouts": 65, "num_generations": 17, "eval_time": "74.5227s", "mean_test_time": "0.2288s"}}
{"task_id": "ece241_2013_q2", "completion": "\n\n\tassign out_sop = (a&~b&~c&~d) | (~a&b&~c&~d) | (~a&~b&c&~d) | (~a&~b&~c&d);\n\tassign out_pos = ~(a|b|c|d) | (a&b) | (a&c) | (a&d) | (b&c) | (b&d) | (c&d);\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 36, "eval_time": "210.8873s", "mean_test_time": "0.2339s"}}
{"task_id": "m2014_q6c", "completion": "\n\tassign Y2 = (y[1] & ~y[6] & w) | (~y[1] & y[2] & ~w) | (y[3] & ~y[2] & ~w) | (~y[3] & y[4] & w);\n\tassign Y4 = (y[5] & ~y[4] & w) | (~y[5] & y[6] & ~w) | (y[1] & ~y[6] & ~w) | (~y[1] & y[2] & w);\n\t\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 52, "eval_time": "293.8765s", "mean_test_time": "0.2363s"}}
{"task_id": "reduction", "completion": "\n\tassign parity = ^in;\nendmodule\n\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "1.7984s", "mean_test_time": "0.2376s"}}
{"task_id": "gates", "completion": "\n\tassign out_and = a & b;\n\tassign out_or = a | b;\n\tassign out_xor = a ^ b;\n\tassign out_nand = ~(a & b);\n\tassign out_nor = ~(a | b);\n\tassign out_xnor = ~(a ^ b);\n\tassign out_anotb = a & ~b;\nendmodule\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "6.0584s", "mean_test_time": "0.2452s"}}
{"task_id": "wire_decl", "completion": "\n\t// Declare intermediate wires\n\twire and1;\n\twire and2;\n\t\n\t// Implement the circuit\n\tassign and1 = a & b;\n\tassign and2 = c & d;\n\tassign out = and1 | and2;\n\tassign out_n = ~out;\nendmodule\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "4.9850s", "mean_test_time": "0.2381s"}}
{"task_id": "7458", "completion": "\n\twire w1;\n\twire w2;\n\twire w3;\n\twire w4;\n\t\n\tassign p1y = w1 | w2;\n\tassign p2y = w3 | w4;\n\t\n\tassign w1 = p1a & p1b & p1c;\n\tassign w2 = p1d & p1e & p1f;\n\tassign w3 = p2a & p2b;\n\tassign w4 = p2c & p2d;\nendmodule\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "7.9987s", "mean_test_time": "0.2480s"}}
{"task_id": "count_clock", "completion": "\n\treg [7:0] hh_reg, mm_reg, ss_reg;\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset) begin\n\t\t\thh <= 8'd12;\n\t\t\tmm <= 8'd0;\n\t\t\tss <= 8'd0;\n\t\t\tpm <= 1'b0;\n\t\tend else if (ena) begin\n\t\t\tss_reg = ss + 1;\n\t\t\tif(ss_reg == 8'd60) begin // 60 seconds in a minute\n\t\t\t\tmm_reg = mm + 1;\n\t\t\t\tss_reg = 8'd0;\n\t\t\t\tif(mm_reg == 8'd60) begin // 60 minutes in an hour\n\t\t\t\t\thh_reg = hh + 1;\n\t\t\t\t\tmm_reg = 8'd0;\n\t\t\t\t\tif (hh_reg == 8'd13) begin // 13 hours in a day (12 AM/PM)\n\t\t\t\t\t\thh_reg = 8'd1;\n\t\t\t\t\t\tpm <= ~pm;\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\t\tss <= ss_reg", "stats": {"num_rollouts": 128, "num_generations": 33, "eval_time": "456.1012s", "mean_test_time": "0.1909s"}}
{"task_id": "2014_q4a", "completion": "\n\talways @(posedge clk) begin\n\t\tif (L == 1'b1) \n\t\t\tQ <= R;\n\t\telse if (E == 1'b1) \n\t\t\tQ <= w;\n\tend\nendmodule\n\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "4.0710s", "mean_test_time": "0.3139s"}}
{"task_id": "rule90", "completion": "\n\t\n\talways @(posedge clk) begin\n\t\tif (load)\n\t\t\t\t  q <= data;\n\t\t\telse\n\t\t\t\tfor (integer i = 0; i < 512; i = i + 1)\n\t\t\t\t\t  if      ((q[i-1] == 1'b1 && q[i+1] == 1'b1) || (q[i-1] == 1'b0 && q[i+1] == 1'b0))\n\t\t\t\t\t\t\t\tq[i] <= 1'b0;\n\t\t\t\t\t  else if ((q[i-1] == 1'b1 && q[i+1] == 1'b0) || (q[i-1] == 1'b0 && q[i+1] == 1'b1))\n\t\t\t\t\t\t\t\tq[i] <= 1'b1;\n\t\t\t\t\t  else if ((q[i-1] == 1'b0 && q[i+1] == 1'b1) || (q[i-1] == 1'b1 && q[i+1] == 1'b0))\n\t\t\t\t\t\t\t\tq[i] <= 1'b0;\n\t\t\t\t\t  else if ((q[i-1] == 1'b0 && q[", "stats": {"num_rollouts": 128, "num_generations": 19, "eval_time": "189.6184s", "mean_test_time": "0.9563s"}}
{"task_id": "lemmings2", "completion": "\n\t\n\treg [1:0] state, nextState;\n\tparameter LEFT = 2'b01, RIGHT = 2'b10;\n\tassign walk_left = (state == LEFT) ? 1'b1 : 1'b0;\n\tassign walk_right = (state == RIGHT) ? 1'b1 : 1'b0;\n\tassign aaah = ground == 1'b0 ? 1'b1 : 1'b0;\n\t\n\t// State transition logic\n\talways @(posedge clk or posedge areset) begin\n\t\tif (areset)\n\t\t\tstate <= LEFT;\n\t\telse\n\t\t\tstate <= nextState;\n\tend\n\t\n\t// Next state logic\n\talways @(*) begin\n\t\tcase (state)\n\t\t\tLEFT: \n\t\t\t\tif (bump_right & ground)\n\t\t\t\t\tnextState = RIGHT;\n\t\t\t\telse if (ground == 1'b0)\n\t\t\t\t\tnextState = LEFT;\n\t\t\t\telse\n\t\t\t\t\tnextState = state;\n\t\t\tRIGHT: \n\t\t\t\tif (bump_left & ground)\n\t\t\t\t\tnextState", "stats": {"num_rollouts": 128, "num_generations": 26, "eval_time": "358.3077s", "mean_test_time": "0.2568s"}}
{"task_id": "ece241_2014_q5a", "completion": "\n\t\n\treg [23:0] state; // 24 bit register to hold the 2's complement of input number.\n\tassign z = state[23]; // The output is the most significant bit of the register.\n\t\n\talways @(posedge clk or posedge areset) begin\n\t\tif (areset)\n\t\t\tstate <= 0;\n\t\telse \n\t\t\tstate <= {x, state[23:1]}; // Shift input bit into MSB and carry out of the register to all other bits.\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 25, "eval_time": "187.1997s", "mean_test_time": "0.2357s"}}
{"task_id": "vector2", "completion": "\n\tassign out = {in[7:0], in[15:8], in[23:16], in[31:24]};\nendmodule\n\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "2.7051s", "mean_test_time": "0.2342s"}}
{"task_id": "m2014_q6b", "completion": "\n\t\n\talways @(*) begin\n\t\tcase (y)\n\t\t\t3'b000: Y2 = w; // A\n\t\t\tdefault: Y2 = 1'bx; \n\t\t\t3'b001: Y2 = ~w; // B\n\t\t\t3'b010: Y2 = ~w; // C\n\t\t\t3'b011: Y2 = w; // D\n\t\t\t3'b100: Y2 = w; // E\n\t\t\t3'b101: Y2 = ~w; // F\n\t\tendcase\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 26, "eval_time": "275.3277s", "mean_test_time": "0.2353s"}}
{"task_id": "kmap1", "completion": "\n\tassign out = a | (b & c) | b | c;\nendmodule\n\n", "stats": {"num_rollouts": 115, "num_generations": 32, "eval_time": "79.5798s", "mean_test_time": "0.2363s"}}
{"task_id": "circuit2", "completion": "\n\twire w1, w2, w3;\n\t\n\tassign w1 = a & ~b & ~c & ~d;\n\tassign w2 = ~a & b & ~c & ~d;\n\tassign w3 = ~a & ~b & c & d;\n\t\n\tassign q = w1 | w2 | w3;\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 32, "eval_time": "227.5774s", "mean_test_time": "0.2463s"}}
{"task_id": "always_if", "completion": "\n\t// Using assign statements\n\tassign out_assign = (sel_b1 & sel_b2) ? b : a;\n\t\n\t// Using always block and procedural if statement\n\talways @(*) begin\n\t\tif ((sel_b1 == 1'b1) && (sel_b2 == 1'b1)) \n\t\t\tout_always = b;\n\t\telse \n\t\t\tout_always = a;\n\tend\nendmodule\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "5.9526s", "mean_test_time": "0.2816s"}}
{"task_id": "ece241_2013_q12", "completion": "\n\treg [7:0] Q;\n\tinteger i;\n\t\n\talways @(posedge clk) begin\n\t\tif (enable)\n\t\t\t Q <= {Q[6:0], S};\n\tend\n\t\n\tassign Z = Q[(A*4 + B*2 + C)];\n\t\nendmodule\n", "stats": {"num_rollouts": 72, "num_generations": 12, "eval_time": "115.2649s", "mean_test_time": "0.2105s"}}
{"task_id": "shift4", "completion": "\n\t\n\talways @(posedge clk or posedge areset) begin\n\t\tif (areset)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tq <= 4'b0;\n\t\telse if (load)\n\t\t\tq <= data;\n\t\telse if (ena)\n\t\t\tq <= {q[2:0], 1'b0};\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 26, "eval_time": "121.8506s", "mean_test_time": "0.2426s"}}
{"task_id": "shift18", "completion": "\n\t\n\talways @(posedge clk) begin\n\t\tif (load)\n\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\tq <= data;\n\t\t\t\n\t\telse if (ena) \n\t\t\tcase (amount)\n\t\t\t\t2'b00: q <= {q[62:0],1'b0}; // shift left by 1 bit\n\t\t\t\t2'b01: q <= {q[55:0],8'h00}; // shift left by 8 bits\n\t\t\t\t2'b10: q <= {1'b0,q[63:1]}; // arithmetic right shift by 1 bit\n\t\t\t\t2'b11: q <= {8'h00,q[55:0]}; // arithmetic right shift by 8 bits\n\t\t\tendcase\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 26, "eval_time": "280.2221s", "mean_test_time": "0.3029s"}}
{"task_id": "m2014_q4c", "completion": "\n\n\talways_ff @(posedge clk) begin\n\t\tif (r) \n\t\t\tq <= 0;\n\t\telse \n\t\t\tq <= d;\n\tend\nendmodule\n\n", "stats": {"num_rollouts": 83, "num_generations": 10, "eval_time": "46.5563s", "mean_test_time": "0.2366s"}}
{"task_id": "ece241_2013_q8", "completion": "\n\treg [1:0] state;\n\tparameter S0 = 2'd0, S1 = 2'd1, S2 = 2'd2;\n\n\talways @(posedge clk or negedge aresetn) begin\n\t\tif (!aresetn) begin\n\t\t\tstate <= S0;\n\t\t\tz <= 1'b0;\n\t\tend else begin\n\t\t\tcase (state) \n\t\t\t\tS0: if (x == 1'b1) state <= S1;\n\t\t\t\tS1: if (x == 1'b0) state <= S2;\n\t\t\t\tS2: if (x == 1'b1) begin state <= S0; z <= 1'b1; end\n\t\t\tendcase\n\t\tend\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 21, "eval_time": "233.8059s", "mean_test_time": "0.2351s"}}
{"task_id": "fsm1s", "completion": "\n\n\treg state;\n\t\n\talways @(posedge clk or posedge reset) begin\n\t\tif(reset)\n\t\t\t state <= 1'b0;\n\t\telse\n\t\t\tcase (state)\n\t\t\t\t1'b0 : if (!in) state <= 1'b0; else state <= 1'b1;\n\t\t\t\t1'b1 : if (!in) state <= 1'b1; else state <= 1'b0;\n\t\t\tendcase\n\tend\n\tassign out = state;\n\t\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 27, "eval_time": "201.9206s", "mean_test_time": "0.2405s"}}
{"task_id": "m2014_q4i", "completion": "\n\tassign out = 1'b0;\nendmodule\n\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "1.4851s", "mean_test_time": "0.2305s"}}
{"task_id": "countbcd", "completion": "\n\t\n\treg [15:0] next_q;\n\twire [4:0] rollover = (next_q[15:12] == 4'd9) && \n\t\t\t(next_q[11:8]  == 4'd9) && \n\t\t\t(next_q[7:4]   == 4'd9);\n\twire [3:0] ena_internal;\n\tassign ena = {ena_internal[3], ena_internal[2], ena_internal[1]};\n\t\n\t// Next state logic\n\talways @(*) begin\n\t\tif (reset) \n\t\t\tnext_q = 16'h0000;\n\t\telse if (rollover) \n\t\t\tnext_q = {4'h0, next_q[15:4]}; // roll over to the left digit\n\t\telse \n\t\t\tnext_q = q + 16'h0001; // increment by one\n\tend\n\t\n\t// Enable logic for each digit\n\talways @(*) begin\n\t\tcase ({rollover, next_q[15:12], next_q", "stats": {"num_rollouts": 128, "num_generations": 50, "eval_time": "635.0133s", "mean_test_time": "0.2580s"}}
{"task_id": "popcount255", "completion": "\n\talways @(*) begin\n\t\tout = 8'b0;\n\t\tfor (integer i=0; i<255; i++) begin\n\t\t\tif (in[i]) \n\t\t\t\tout = out + 1;\n\t\tend\n\tend\nendmodule\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "4.0366s", "mean_test_time": "0.2891s"}}
{"task_id": "2014_q3c", "completion": "\n\treg [2:0] Y;\n\t\n\talways @(posedge clk) begin\n\t\t\tcase ({x, y}) \n\t\t\t\t3'b0_00 : begin Y <= 3'd0; Y0 <= Y[0]; z <= 1'b0; end\n\t\t\t\t3'b0_01 : begin Y <= 3'd0; Y0 <= Y[0]; z <= 1'b0; end\n\t\t\t\t3'b0_10 : begin Y <= 3'd2; Y0 <= Y[0]; z <= 1'b0; end\n\t\t\t\t3'b1_00 : begin Y <= 3'd1; Y0 <= Y[0]; z <= 1'b0; end\n\t\t\t\t3'b1_01 : begin Y <= 3'd1; Y0 <= Y[0]; z <= 1'b0; end\n\t\t\t\tdefault:   begin Y <= 3'd1; Y0 <= Y[0]; z <= 1'b1; end\n\t\t\tendcase\n\tend\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 33, "eval_time": "419.8447s", "mean_test_time": "0.2005s"}}
{"task_id": "thermostat", "completion": "\n\tassign heater = (mode == 1'b0) ? 1'b0 : too_cold;\n\tassign aircon = (mode == 1'b1) ? 1'b0 : too_hot;\n\tassign fan = (heater | aircon) | fan_on;\nendmodule\n", "stats": {"num_rollouts": 0, "num_generations": 1, "eval_time": "5.3902s", "mean_test_time": "0.2399s"}}
{"task_id": "2012_q2b", "completion": "\n\n\tassign Y1 = (y[5] & ~w) | (~y[4] & y[2]);\n\tassign Y3 = (y[5] & w) | (~y[4] & y[3]) | (y[2] & ~w);\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 54, "eval_time": "205.0384s", "mean_test_time": "0.2474s"}}
{"task_id": "always_casez", "completion": "\n\talways @(*) begin\n\t\tif (in[0]) \n\t\t\tpos = 3'd0;\n\t\telse if (in[1]) \n\t\t\tpos = 3'd1;\n\t\telse if (in[2]) \n\t\t\tpos = 3'd2;\n\t\telse if (in[3]) \n\t\t\tpos = 3'd3;\n\t\telse if (in[4]) \n\t\t\tpos = 3'd4;\n\t\telse if (in[5]) \n\t\t\tpos = 3'd5;\n\t\telse if (in[6]) \n\t\t\tpos = 3'd6;\n\t\telse if (in[7]) \n\t\t\tpos = 3'd7;\n\t\telse \n\t\t\tpos = 3'd0; // default to zero if no bits are high\n\tend\nendmodule\n", "stats": {"num_rollouts": 57, "num_generations": 11, "eval_time": "149.7785s", "mean_test_time": "8.3706s"}}
{"task_id": "review2015_fsmonehot", "completion": "\n\n    assign B3_next = (state[3] & d) | state[8];  // if in state B3 and input is '1' or still in B3\n    assign S_next = ~(|state[7:0]) | ((state[2] & ~d) | state[9]);   // if all states are off (one-hot decoding) or in state S1 and input is '0' or still in S1\n    assign S1_next = (state[1] & d) | state[8];  // if in state S1 and input is '1' or still in S1\n    assign Count_next = (state[4] & ~done_counting) | ((state[5:3] & done_counting) | state[9]);   // if in state Count and not done counting or in B0-B2 states and done counting\n    assign Wait_next = (state[6] & ack) | state[8];  // if in state Wait and input is '1' or still in S\n    \n    assign done = ~(|state[7:5]) & state[4];   // if in Count state and not counting\n    assign", "stats": {"num_rollouts": 128, "num_generations": 44, "eval_time": "653.1713s", "mean_test_time": "0.5099s"}}
{"task_id": "2012_q2fsm", "completion": "\n\treg [1:0] state;\n\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset) \n\t\t\tstate <= 2'b00; // A\n\t\telse \n\t\t\tcase ({w, state}) \n\t\t\t\t4'b0001 : state <= 2'b01; // B\n\t\t\t\t4'b0000 : state <= 2'b00; // A\n\t\t\t\t4'b0101 : state <= 2'b10; // C\n\t\t\t\t4'b0100 : state <= 2'b11; // D\n\t\t\t\t4'b1001 : state <= 2'b10; // E\n\t\t\t\t4'b1000 : state <= 2'b11; // D\n\t\t\t\t4'b1101 : state <= 2'b00; // F\n\t\t\t\tdefault:  state <= 2'b00; // A\n\t\t\tendcase\n\tend\n\n\t// Output logic\n\tassign z = (state == 2'b10); // Z is high when in state C or E\n\nendmodule\n", "stats": {"num_rollouts": 128, "num_generations": 35, "eval_time": "488.9482s", "mean_test_time": "0.5122s"}}
{"task_id": "fsm_ps2data", "completion": "\n\treg [3:0] state = 4'b0000;\n\treg [23:0] out_bytes_reg = 24'h0;\n\twire done_internal;\n\tassign done = done_internal;\n\t\n\talways @(posedge clk or posedge reset) begin\n\t\tif (reset == 1'b1) begin\n\t\t\tstate <= 4'b0000;\n\t\t\tout_bytes_reg <= 24'h0;\n\t\tend else begin\n\t\t\tcase (state) \n\t\t\t\t4'b0000: if(in[3]==1'b1) state <= 4'b0001; // start of message\n\t\t\t\t4'b0001: begin state <= 4'b0010; out_bytes_reg <= {out_bytes_reg[15:0], in}; end // second byte\n\t\t\t\t4'b0010: begin state <= 4'b0011; out_bytes_reg <= {out_bytes_reg[23:8], in, 8'h00}; end // third byte\n\t\t\t\t4'b0011: if(in[3]==1'b1) state <= 4'b000", "stats": {"num_rollouts": 128, "num_generations": 28, "eval_time": "466.5690s", "mean_test_time": "0.4791s"}}
